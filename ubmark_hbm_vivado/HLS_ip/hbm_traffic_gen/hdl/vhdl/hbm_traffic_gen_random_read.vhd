-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hbm_traffic_gen_random_read is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer_r_ce1 : OUT STD_LOGIC;
    buffer_r_we1 : OUT STD_LOGIC;
    buffer_r_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    range_r : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hbm_traffic_gen_random_read is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_DEAFBEEF : STD_LOGIC_VECTOR (31 downto 0) := "11011110101011111011111011101111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln87_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal icmp_ln87_reg_244_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_107 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_io : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_107_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter14_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter16_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter17_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter18_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter19_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter20_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter21_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter22_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter23_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter24_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter25_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter26_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter27_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter28_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter29_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter30_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter31_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter32_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter33_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter34_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter35_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter36_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter37_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter38_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter39_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter40_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter41_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter42_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_107_pp0_iter43_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal rng_state_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_fu_130_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln87_reg_239 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln87_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_244_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rng_state_3_fu_201_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rng_state_3_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal urem_ln89_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_read_reg_265 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_111_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_rng_state_phi_fu_123_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln87_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_1_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln65_fu_155_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln66_8_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln66_7_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln66_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_fu_145_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_ce : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hbm_traffic_gen_urem_32ns_32ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    urem_32ns_32ns_32_36_1_U12 : component hbm_traffic_gen_urem_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_209_p0,
        din1 => range_r,
        ce => grp_fu_209_ce,
        dout => grp_fu_209_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_107 <= ap_const_lv11_0;
            elsif (((icmp_ln87_reg_244 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_107 <= add_ln87_reg_239;
            end if; 
        end if;
    end process;

    rng_state_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rng_state_reg_119 <= ap_const_lv32_DEAFBEEF;
            elsif (((icmp_ln87_reg_244 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rng_state_reg_119 <= rng_state_3_reg_248;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln87_reg_239 <= add_ln87_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_244_pp0_iter42_reg = ap_const_lv1_0))) then
                gmem_addr_read_reg_265 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_reg_107_pp0_iter10_reg <= i_reg_107_pp0_iter9_reg;
                i_reg_107_pp0_iter11_reg <= i_reg_107_pp0_iter10_reg;
                i_reg_107_pp0_iter12_reg <= i_reg_107_pp0_iter11_reg;
                i_reg_107_pp0_iter13_reg <= i_reg_107_pp0_iter12_reg;
                i_reg_107_pp0_iter14_reg <= i_reg_107_pp0_iter13_reg;
                i_reg_107_pp0_iter15_reg <= i_reg_107_pp0_iter14_reg;
                i_reg_107_pp0_iter16_reg <= i_reg_107_pp0_iter15_reg;
                i_reg_107_pp0_iter17_reg <= i_reg_107_pp0_iter16_reg;
                i_reg_107_pp0_iter18_reg <= i_reg_107_pp0_iter17_reg;
                i_reg_107_pp0_iter19_reg <= i_reg_107_pp0_iter18_reg;
                i_reg_107_pp0_iter20_reg <= i_reg_107_pp0_iter19_reg;
                i_reg_107_pp0_iter21_reg <= i_reg_107_pp0_iter20_reg;
                i_reg_107_pp0_iter22_reg <= i_reg_107_pp0_iter21_reg;
                i_reg_107_pp0_iter23_reg <= i_reg_107_pp0_iter22_reg;
                i_reg_107_pp0_iter24_reg <= i_reg_107_pp0_iter23_reg;
                i_reg_107_pp0_iter25_reg <= i_reg_107_pp0_iter24_reg;
                i_reg_107_pp0_iter26_reg <= i_reg_107_pp0_iter25_reg;
                i_reg_107_pp0_iter27_reg <= i_reg_107_pp0_iter26_reg;
                i_reg_107_pp0_iter28_reg <= i_reg_107_pp0_iter27_reg;
                i_reg_107_pp0_iter29_reg <= i_reg_107_pp0_iter28_reg;
                i_reg_107_pp0_iter2_reg <= i_reg_107_pp0_iter1_reg;
                i_reg_107_pp0_iter30_reg <= i_reg_107_pp0_iter29_reg;
                i_reg_107_pp0_iter31_reg <= i_reg_107_pp0_iter30_reg;
                i_reg_107_pp0_iter32_reg <= i_reg_107_pp0_iter31_reg;
                i_reg_107_pp0_iter33_reg <= i_reg_107_pp0_iter32_reg;
                i_reg_107_pp0_iter34_reg <= i_reg_107_pp0_iter33_reg;
                i_reg_107_pp0_iter35_reg <= i_reg_107_pp0_iter34_reg;
                i_reg_107_pp0_iter36_reg <= i_reg_107_pp0_iter35_reg;
                i_reg_107_pp0_iter37_reg <= i_reg_107_pp0_iter36_reg;
                i_reg_107_pp0_iter38_reg <= i_reg_107_pp0_iter37_reg;
                i_reg_107_pp0_iter39_reg <= i_reg_107_pp0_iter38_reg;
                i_reg_107_pp0_iter3_reg <= i_reg_107_pp0_iter2_reg;
                i_reg_107_pp0_iter40_reg <= i_reg_107_pp0_iter39_reg;
                i_reg_107_pp0_iter41_reg <= i_reg_107_pp0_iter40_reg;
                i_reg_107_pp0_iter42_reg <= i_reg_107_pp0_iter41_reg;
                i_reg_107_pp0_iter43_reg <= i_reg_107_pp0_iter42_reg;
                i_reg_107_pp0_iter4_reg <= i_reg_107_pp0_iter3_reg;
                i_reg_107_pp0_iter5_reg <= i_reg_107_pp0_iter4_reg;
                i_reg_107_pp0_iter6_reg <= i_reg_107_pp0_iter5_reg;
                i_reg_107_pp0_iter7_reg <= i_reg_107_pp0_iter6_reg;
                i_reg_107_pp0_iter8_reg <= i_reg_107_pp0_iter7_reg;
                i_reg_107_pp0_iter9_reg <= i_reg_107_pp0_iter8_reg;
                icmp_ln87_reg_244_pp0_iter10_reg <= icmp_ln87_reg_244_pp0_iter9_reg;
                icmp_ln87_reg_244_pp0_iter11_reg <= icmp_ln87_reg_244_pp0_iter10_reg;
                icmp_ln87_reg_244_pp0_iter12_reg <= icmp_ln87_reg_244_pp0_iter11_reg;
                icmp_ln87_reg_244_pp0_iter13_reg <= icmp_ln87_reg_244_pp0_iter12_reg;
                icmp_ln87_reg_244_pp0_iter14_reg <= icmp_ln87_reg_244_pp0_iter13_reg;
                icmp_ln87_reg_244_pp0_iter15_reg <= icmp_ln87_reg_244_pp0_iter14_reg;
                icmp_ln87_reg_244_pp0_iter16_reg <= icmp_ln87_reg_244_pp0_iter15_reg;
                icmp_ln87_reg_244_pp0_iter17_reg <= icmp_ln87_reg_244_pp0_iter16_reg;
                icmp_ln87_reg_244_pp0_iter18_reg <= icmp_ln87_reg_244_pp0_iter17_reg;
                icmp_ln87_reg_244_pp0_iter19_reg <= icmp_ln87_reg_244_pp0_iter18_reg;
                icmp_ln87_reg_244_pp0_iter20_reg <= icmp_ln87_reg_244_pp0_iter19_reg;
                icmp_ln87_reg_244_pp0_iter21_reg <= icmp_ln87_reg_244_pp0_iter20_reg;
                icmp_ln87_reg_244_pp0_iter22_reg <= icmp_ln87_reg_244_pp0_iter21_reg;
                icmp_ln87_reg_244_pp0_iter23_reg <= icmp_ln87_reg_244_pp0_iter22_reg;
                icmp_ln87_reg_244_pp0_iter24_reg <= icmp_ln87_reg_244_pp0_iter23_reg;
                icmp_ln87_reg_244_pp0_iter25_reg <= icmp_ln87_reg_244_pp0_iter24_reg;
                icmp_ln87_reg_244_pp0_iter26_reg <= icmp_ln87_reg_244_pp0_iter25_reg;
                icmp_ln87_reg_244_pp0_iter27_reg <= icmp_ln87_reg_244_pp0_iter26_reg;
                icmp_ln87_reg_244_pp0_iter28_reg <= icmp_ln87_reg_244_pp0_iter27_reg;
                icmp_ln87_reg_244_pp0_iter29_reg <= icmp_ln87_reg_244_pp0_iter28_reg;
                icmp_ln87_reg_244_pp0_iter2_reg <= icmp_ln87_reg_244_pp0_iter1_reg;
                icmp_ln87_reg_244_pp0_iter30_reg <= icmp_ln87_reg_244_pp0_iter29_reg;
                icmp_ln87_reg_244_pp0_iter31_reg <= icmp_ln87_reg_244_pp0_iter30_reg;
                icmp_ln87_reg_244_pp0_iter32_reg <= icmp_ln87_reg_244_pp0_iter31_reg;
                icmp_ln87_reg_244_pp0_iter33_reg <= icmp_ln87_reg_244_pp0_iter32_reg;
                icmp_ln87_reg_244_pp0_iter34_reg <= icmp_ln87_reg_244_pp0_iter33_reg;
                icmp_ln87_reg_244_pp0_iter35_reg <= icmp_ln87_reg_244_pp0_iter34_reg;
                icmp_ln87_reg_244_pp0_iter36_reg <= icmp_ln87_reg_244_pp0_iter35_reg;
                icmp_ln87_reg_244_pp0_iter37_reg <= icmp_ln87_reg_244_pp0_iter36_reg;
                icmp_ln87_reg_244_pp0_iter38_reg <= icmp_ln87_reg_244_pp0_iter37_reg;
                icmp_ln87_reg_244_pp0_iter39_reg <= icmp_ln87_reg_244_pp0_iter38_reg;
                icmp_ln87_reg_244_pp0_iter3_reg <= icmp_ln87_reg_244_pp0_iter2_reg;
                icmp_ln87_reg_244_pp0_iter40_reg <= icmp_ln87_reg_244_pp0_iter39_reg;
                icmp_ln87_reg_244_pp0_iter41_reg <= icmp_ln87_reg_244_pp0_iter40_reg;
                icmp_ln87_reg_244_pp0_iter42_reg <= icmp_ln87_reg_244_pp0_iter41_reg;
                icmp_ln87_reg_244_pp0_iter43_reg <= icmp_ln87_reg_244_pp0_iter42_reg;
                icmp_ln87_reg_244_pp0_iter4_reg <= icmp_ln87_reg_244_pp0_iter3_reg;
                icmp_ln87_reg_244_pp0_iter5_reg <= icmp_ln87_reg_244_pp0_iter4_reg;
                icmp_ln87_reg_244_pp0_iter6_reg <= icmp_ln87_reg_244_pp0_iter5_reg;
                icmp_ln87_reg_244_pp0_iter7_reg <= icmp_ln87_reg_244_pp0_iter6_reg;
                icmp_ln87_reg_244_pp0_iter8_reg <= icmp_ln87_reg_244_pp0_iter7_reg;
                icmp_ln87_reg_244_pp0_iter9_reg <= icmp_ln87_reg_244_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_107_pp0_iter1_reg <= i_reg_107;
                icmp_ln87_reg_244 <= icmp_ln87_fu_140_p2;
                icmp_ln87_reg_244_pp0_iter1_reg <= icmp_ln87_reg_244;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_fu_140_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rng_state_3_reg_248 <= rng_state_3_fu_201_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_244_pp0_iter34_reg = ap_const_lv1_0))) then
                urem_ln89_reg_254 <= grp_fu_209_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter0, icmp_ln87_fu_140_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter44)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln87_fu_140_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln87_fu_140_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln87_fu_130_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_111_p4) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state47 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter43, icmp_ln87_reg_244_pp0_iter42_reg, ap_block_state38_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter36 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state38_io)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln87_reg_244_pp0_iter42_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter43, icmp_ln87_reg_244_pp0_iter42_reg, ap_block_state38_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter36 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state38_io)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln87_reg_244_pp0_iter42_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state38_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln87_reg_244_pp0_iter35_reg)
    begin
                ap_block_state38_io <= ((icmp_ln87_reg_244_pp0_iter35_reg = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state38_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state45_pp0_stage0_iter43_assign_proc : process(m_axi_gmem_RVALID, icmp_ln87_reg_244_pp0_iter42_reg)
    begin
                ap_block_state45_pp0_stage0_iter43 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln87_reg_244_pp0_iter42_reg = ap_const_lv1_0));
    end process;

        ap_block_state46_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln87_fu_140_p2)
    begin
        if ((icmp_ln87_fu_140_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter44)
    begin
        if (((ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_111_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln87_reg_244, i_reg_107, ap_CS_fsm_pp0_stage0, add_ln87_reg_239, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln87_reg_244 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_111_p4 <= add_ln87_reg_239;
        else 
            ap_phi_mux_i_phi_fu_111_p4 <= i_reg_107;
        end if; 
    end process;


    ap_phi_mux_rng_state_phi_fu_123_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln87_reg_244, ap_CS_fsm_pp0_stage0, rng_state_reg_119, rng_state_3_reg_248, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln87_reg_244 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_rng_state_phi_fu_123_p4 <= rng_state_3_reg_248;
        else 
            ap_phi_mux_rng_state_phi_fu_123_p4 <= rng_state_reg_119;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address1 <= zext_ln87_fu_224_p1(10 - 1 downto 0);

    buffer_r_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter44)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1))) then 
            buffer_r_ce1 <= ap_const_logic_1;
        else 
            buffer_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_d1 <= gmem_addr_read_reg_265;

    buffer_r_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_244_pp0_iter43_reg, ap_enable_reg_pp0_iter44)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1) and (icmp_ln87_reg_244_pp0_iter43_reg = ap_const_lv1_0))) then 
            buffer_r_we1 <= ap_const_logic_1;
        else 
            buffer_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_enable_reg_pp0_iter36, ap_block_pp0_stage0, icmp_ln87_reg_244_pp0_iter35_reg)
    begin
        if (((icmp_ln87_reg_244_pp0_iter35_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter43, icmp_ln87_reg_244_pp0_iter42_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln87_reg_244_pp0_iter42_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_209_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_209_ce <= ap_const_logic_1;
        else 
            grp_fu_209_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_209_p0 <= (xor_ln66_fu_195_p2 & lshr_ln_fu_145_p4);
    icmp_ln87_fu_140_p2 <= "1" when (zext_ln87_1_fu_136_p1 = size) else "0";
    lshr_ln_fu_145_p4 <= ap_phi_mux_rng_state_phi_fu_123_p4(31 downto 1);
    m_axi_gmem_ARADDR <= zext_ln89_fu_214_p1;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter36, icmp_ln87_reg_244_pp0_iter35_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln87_reg_244_pp0_iter35_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter43, icmp_ln87_reg_244_pp0_iter42_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_reg_244_pp0_iter42_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv256_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv32_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    rng_state_3_fu_201_p3 <= (xor_ln66_fu_195_p2 & lshr_ln_fu_145_p4);
    tmp_8_fu_167_p3 <= ap_phi_mux_rng_state_phi_fu_123_p4(3 downto 3);
    tmp_9_fu_175_p3 <= ap_phi_mux_rng_state_phi_fu_123_p4(4 downto 4);
    tmp_fu_159_p3 <= ap_phi_mux_rng_state_phi_fu_123_p4(1 downto 1);
    trunc_ln65_fu_155_p1 <= ap_phi_mux_rng_state_phi_fu_123_p4(1 - 1 downto 0);
    xor_ln66_7_fu_183_p2 <= (trunc_ln65_fu_155_p1 xor tmp_fu_159_p3);
    xor_ln66_8_fu_189_p2 <= (tmp_9_fu_175_p3 xor tmp_8_fu_167_p3);
    xor_ln66_fu_195_p2 <= (xor_ln66_8_fu_189_p2 xor xor_ln66_7_fu_183_p2);
    zext_ln87_1_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_111_p4),32));
    zext_ln87_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_107_pp0_iter43_reg),64));
    zext_ln89_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln89_reg_254),64));
end behav;
