-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hbm_traffic_gen is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CMD_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_CMD_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CMD_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CMD_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CMD_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CMD_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CMD_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CMD_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_CMD_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_CMD_USER_VALUE : INTEGER := 0;
    C_M_AXI_CMD_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CMD_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_cmd_AWVALID : OUT STD_LOGIC;
    m_axi_cmd_AWREADY : IN STD_LOGIC;
    m_axi_cmd_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_ADDR_WIDTH-1 downto 0);
    m_axi_cmd_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_ID_WIDTH-1 downto 0);
    m_axi_cmd_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_cmd_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cmd_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cmd_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cmd_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cmd_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cmd_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cmd_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cmd_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_AWUSER_WIDTH-1 downto 0);
    m_axi_cmd_WVALID : OUT STD_LOGIC;
    m_axi_cmd_WREADY : IN STD_LOGIC;
    m_axi_cmd_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_DATA_WIDTH-1 downto 0);
    m_axi_cmd_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_DATA_WIDTH/8-1 downto 0);
    m_axi_cmd_WLAST : OUT STD_LOGIC;
    m_axi_cmd_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_ID_WIDTH-1 downto 0);
    m_axi_cmd_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_WUSER_WIDTH-1 downto 0);
    m_axi_cmd_ARVALID : OUT STD_LOGIC;
    m_axi_cmd_ARREADY : IN STD_LOGIC;
    m_axi_cmd_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_ADDR_WIDTH-1 downto 0);
    m_axi_cmd_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_ID_WIDTH-1 downto 0);
    m_axi_cmd_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_cmd_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cmd_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cmd_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cmd_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cmd_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cmd_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cmd_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cmd_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CMD_ARUSER_WIDTH-1 downto 0);
    m_axi_cmd_RVALID : IN STD_LOGIC;
    m_axi_cmd_RREADY : OUT STD_LOGIC;
    m_axi_cmd_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CMD_DATA_WIDTH-1 downto 0);
    m_axi_cmd_RLAST : IN STD_LOGIC;
    m_axi_cmd_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CMD_ID_WIDTH-1 downto 0);
    m_axi_cmd_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CMD_RUSER_WIDTH-1 downto 0);
    m_axi_cmd_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cmd_BVALID : IN STD_LOGIC;
    m_axi_cmd_BREADY : OUT STD_LOGIC;
    m_axi_cmd_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cmd_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CMD_ID_WIDTH-1 downto 0);
    m_axi_cmd_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CMD_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of hbm_traffic_gen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hbm_traffic_gen_hbm_traffic_gen,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.430900,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=12023,HLS_SYN_LUT=9667,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (58 downto 0) := "00000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (58 downto 0) := "00000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (58 downto 0) := "00000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (58 downto 0) := "00000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (58 downto 0) := "00000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (58 downto 0) := "00000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (58 downto 0) := "00001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (58 downto 0) := "00010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (58 downto 0) := "00100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (58 downto 0) := "01000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (58 downto 0) := "10000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal cmd_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cmd_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal cmd_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal cmd_blk_n_AR : STD_LOGIC;
    signal cmd_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cmd_AWVALID : STD_LOGIC;
    signal cmd_AWREADY : STD_LOGIC;
    signal cmd_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal cmd_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_WVALID : STD_LOGIC;
    signal cmd_WREADY : STD_LOGIC;
    signal cmd_ARVALID : STD_LOGIC;
    signal cmd_ARREADY : STD_LOGIC;
    signal cmd_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal cmd_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_RVALID : STD_LOGIC;
    signal cmd_RREADY : STD_LOGIC;
    signal cmd_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_RLAST : STD_LOGIC;
    signal cmd_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal cmd_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cmd_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal cmd_BVALID : STD_LOGIC;
    signal cmd_BREADY : STD_LOGIC;
    signal cmd_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal cmd_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal cmd_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cmd_addr_reg_307 : STD_LOGIC_VECTOR (63 downto 0);
    signal cmd_read_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal pattern_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal range_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_addr_3_read_reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_addr_4_read_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal buffer_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal buffer_we1 : STD_LOGIC;
    signal buffer_d1 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_random_read_write_fu_202_ap_start : STD_LOGIC;
    signal grp_random_read_write_fu_202_ap_done : STD_LOGIC;
    signal grp_random_read_write_fu_202_ap_idle : STD_LOGIC;
    signal grp_random_read_write_fu_202_ap_ready : STD_LOGIC;
    signal grp_random_read_write_fu_202_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_random_read_write_fu_202_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_random_read_write_fu_202_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_random_read_write_fu_202_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_random_read_write_fu_202_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_write_fu_202_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_random_read_write_fu_202_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_random_read_write_fu_202_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_random_read_write_fu_202_buffer_r_ce0 : STD_LOGIC;
    signal grp_random_read_write_fu_202_buffer_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_random_read_write_fu_202_buffer_r_ce1 : STD_LOGIC;
    signal grp_random_read_write_fu_202_buffer_r_we1 : STD_LOGIC;
    signal grp_random_read_write_fu_202_buffer_r_d1 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_random_write_fu_211_ap_start : STD_LOGIC;
    signal grp_random_write_fu_211_ap_done : STD_LOGIC;
    signal grp_random_write_fu_211_ap_idle : STD_LOGIC;
    signal grp_random_write_fu_211_ap_ready : STD_LOGIC;
    signal grp_random_write_fu_211_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_random_write_fu_211_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_random_write_fu_211_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_random_write_fu_211_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_random_write_fu_211_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_write_fu_211_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_random_write_fu_211_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_random_write_fu_211_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_random_write_fu_211_buffer_r_ce0 : STD_LOGIC;
    signal grp_random_read_fu_220_ap_start : STD_LOGIC;
    signal grp_random_read_fu_220_ap_done : STD_LOGIC;
    signal grp_random_read_fu_220_ap_idle : STD_LOGIC;
    signal grp_random_read_fu_220_ap_ready : STD_LOGIC;
    signal grp_random_read_fu_220_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_random_read_fu_220_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_random_read_fu_220_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_random_read_fu_220_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_random_read_fu_220_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_random_read_fu_220_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_random_read_fu_220_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_random_read_fu_220_buffer_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_random_read_fu_220_buffer_r_ce1 : STD_LOGIC;
    signal grp_random_read_fu_220_buffer_r_we1 : STD_LOGIC;
    signal grp_random_read_fu_220_buffer_r_d1 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_seq_write_burst_fu_229_ap_start : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_ap_done : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_ap_idle : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_ap_ready : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_burst_fu_229_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_seq_write_burst_fu_229_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_seq_write_burst_fu_229_buffer_r_ce0 : STD_LOGIC;
    signal grp_seq_write_fu_237_ap_start : STD_LOGIC;
    signal grp_seq_write_fu_237_ap_done : STD_LOGIC;
    signal grp_seq_write_fu_237_ap_idle : STD_LOGIC;
    signal grp_seq_write_fu_237_ap_ready : STD_LOGIC;
    signal grp_seq_write_fu_237_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_seq_write_fu_237_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_seq_write_fu_237_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_seq_write_fu_237_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_seq_write_fu_237_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_write_fu_237_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_seq_write_fu_237_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_seq_write_fu_237_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_seq_write_fu_237_buffer_r_ce0 : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_ap_start : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_ap_done : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_ap_idle : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_ap_ready : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_burst_fu_245_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_buffer_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_seq_read_burst_fu_245_buffer_r_ce1 : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_buffer_r_we1 : STD_LOGIC;
    signal grp_seq_read_burst_fu_245_buffer_r_d1 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_seq_read_fu_253_ap_start : STD_LOGIC;
    signal grp_seq_read_fu_253_ap_done : STD_LOGIC;
    signal grp_seq_read_fu_253_ap_idle : STD_LOGIC;
    signal grp_seq_read_fu_253_ap_ready : STD_LOGIC;
    signal grp_seq_read_fu_253_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_seq_read_fu_253_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_seq_read_fu_253_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_seq_read_fu_253_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_seq_read_fu_253_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_seq_read_fu_253_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_seq_read_fu_253_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_seq_read_fu_253_buffer_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_seq_read_fu_253_buffer_r_ce1 : STD_LOGIC;
    signal grp_seq_read_fu_253_buffer_r_we1 : STD_LOGIC;
    signal grp_seq_read_fu_253_buffer_r_d1 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_random_read_write_fu_202_ap_start_reg : STD_LOGIC := '0';
    signal grp_random_write_fu_211_ap_start_reg : STD_LOGIC := '0';
    signal grp_random_read_fu_220_ap_start_reg : STD_LOGIC := '0';
    signal grp_seq_write_burst_fu_229_ap_start_reg : STD_LOGIC := '0';
    signal grp_seq_write_fu_237_ap_start_reg : STD_LOGIC := '0';
    signal grp_seq_read_burst_fu_245_ap_start_reg : STD_LOGIC := '0';
    signal grp_seq_read_fu_253_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_state33_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal lnot4_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lnot18_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln146_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hbm_traffic_gen_random_read_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_we1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        range_r : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hbm_traffic_gen_random_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        range_r : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hbm_traffic_gen_random_read IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_we1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        range_r : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hbm_traffic_gen_seq_write_burst IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hbm_traffic_gen_seq_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hbm_traffic_gen_seq_read_burst IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_we1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hbm_traffic_gen_seq_read IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_we1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hbm_traffic_gen_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component hbm_traffic_gen_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hbm_traffic_gen_cmd_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    gmem_m_axi_U : component hbm_traffic_gen_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_GMEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    cmd_m_axi_U : component hbm_traffic_gen_cmd_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CMD_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CMD_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CMD_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CMD_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CMD_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CMD_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CMD_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CMD_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_CMD_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_CMD_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CMD_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CMD_CACHE_VALUE)
    port map (
        AWVALID => m_axi_cmd_AWVALID,
        AWREADY => m_axi_cmd_AWREADY,
        AWADDR => m_axi_cmd_AWADDR,
        AWID => m_axi_cmd_AWID,
        AWLEN => m_axi_cmd_AWLEN,
        AWSIZE => m_axi_cmd_AWSIZE,
        AWBURST => m_axi_cmd_AWBURST,
        AWLOCK => m_axi_cmd_AWLOCK,
        AWCACHE => m_axi_cmd_AWCACHE,
        AWPROT => m_axi_cmd_AWPROT,
        AWQOS => m_axi_cmd_AWQOS,
        AWREGION => m_axi_cmd_AWREGION,
        AWUSER => m_axi_cmd_AWUSER,
        WVALID => m_axi_cmd_WVALID,
        WREADY => m_axi_cmd_WREADY,
        WDATA => m_axi_cmd_WDATA,
        WSTRB => m_axi_cmd_WSTRB,
        WLAST => m_axi_cmd_WLAST,
        WID => m_axi_cmd_WID,
        WUSER => m_axi_cmd_WUSER,
        ARVALID => m_axi_cmd_ARVALID,
        ARREADY => m_axi_cmd_ARREADY,
        ARADDR => m_axi_cmd_ARADDR,
        ARID => m_axi_cmd_ARID,
        ARLEN => m_axi_cmd_ARLEN,
        ARSIZE => m_axi_cmd_ARSIZE,
        ARBURST => m_axi_cmd_ARBURST,
        ARLOCK => m_axi_cmd_ARLOCK,
        ARCACHE => m_axi_cmd_ARCACHE,
        ARPROT => m_axi_cmd_ARPROT,
        ARQOS => m_axi_cmd_ARQOS,
        ARREGION => m_axi_cmd_ARREGION,
        ARUSER => m_axi_cmd_ARUSER,
        RVALID => m_axi_cmd_RVALID,
        RREADY => m_axi_cmd_RREADY,
        RDATA => m_axi_cmd_RDATA,
        RLAST => m_axi_cmd_RLAST,
        RID => m_axi_cmd_RID,
        RUSER => m_axi_cmd_RUSER,
        RRESP => m_axi_cmd_RRESP,
        BVALID => m_axi_cmd_BVALID,
        BREADY => m_axi_cmd_BREADY,
        BRESP => m_axi_cmd_BRESP,
        BID => m_axi_cmd_BID,
        BUSER => m_axi_cmd_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => cmd_ARVALID,
        I_ARREADY => cmd_ARREADY,
        I_ARADDR => cmd_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => cmd_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => cmd_RVALID,
        I_RREADY => cmd_RREADY,
        I_RDATA => cmd_RDATA,
        I_RID => cmd_RID,
        I_RUSER => cmd_RUSER,
        I_RRESP => cmd_RRESP,
        I_RLAST => cmd_RLAST,
        I_AWVALID => cmd_AWVALID,
        I_AWREADY => cmd_AWREADY,
        I_AWADDR => cmd_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => cmd_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => cmd_WVALID,
        I_WREADY => cmd_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => cmd_BVALID,
        I_BREADY => cmd_BREADY,
        I_BRESP => cmd_BRESP,
        I_BID => cmd_BID,
        I_BUSER => cmd_BUSER);

    buffer_U : component hbm_traffic_gen_buffer
    generic map (
        DataWidth => 256,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        q0 => buffer_q0,
        address1 => buffer_address1,
        ce1 => buffer_ce1,
        we1 => buffer_we1,
        d1 => buffer_d1);

    grp_random_read_write_fu_202 : component hbm_traffic_gen_random_read_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_random_read_write_fu_202_ap_start,
        ap_done => grp_random_read_write_fu_202_ap_done,
        ap_idle => grp_random_read_write_fu_202_ap_idle,
        ap_ready => grp_random_read_write_fu_202_ap_ready,
        m_axi_gmem_AWVALID => grp_random_read_write_fu_202_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_random_read_write_fu_202_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_random_read_write_fu_202_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_random_read_write_fu_202_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_random_read_write_fu_202_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_random_read_write_fu_202_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_random_read_write_fu_202_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_random_read_write_fu_202_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_random_read_write_fu_202_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_random_read_write_fu_202_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_random_read_write_fu_202_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_random_read_write_fu_202_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_random_read_write_fu_202_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_random_read_write_fu_202_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_random_read_write_fu_202_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_random_read_write_fu_202_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_random_read_write_fu_202_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_random_read_write_fu_202_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_random_read_write_fu_202_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_random_read_write_fu_202_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_random_read_write_fu_202_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_random_read_write_fu_202_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_random_read_write_fu_202_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_random_read_write_fu_202_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_random_read_write_fu_202_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_random_read_write_fu_202_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_random_read_write_fu_202_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_random_read_write_fu_202_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_random_read_write_fu_202_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_random_read_write_fu_202_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_random_read_write_fu_202_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_random_read_write_fu_202_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        buffer_r_address0 => grp_random_read_write_fu_202_buffer_r_address0,
        buffer_r_ce0 => grp_random_read_write_fu_202_buffer_r_ce0,
        buffer_r_q0 => buffer_q0,
        buffer_r_address1 => grp_random_read_write_fu_202_buffer_r_address1,
        buffer_r_ce1 => grp_random_read_write_fu_202_buffer_r_ce1,
        buffer_r_we1 => grp_random_read_write_fu_202_buffer_r_we1,
        buffer_r_d1 => grp_random_read_write_fu_202_buffer_r_d1,
        size => size_reg_349,
        range_r => range_reg_360);

    grp_random_write_fu_211 : component hbm_traffic_gen_random_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_random_write_fu_211_ap_start,
        ap_done => grp_random_write_fu_211_ap_done,
        ap_idle => grp_random_write_fu_211_ap_idle,
        ap_ready => grp_random_write_fu_211_ap_ready,
        m_axi_gmem_AWVALID => grp_random_write_fu_211_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_random_write_fu_211_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_random_write_fu_211_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_random_write_fu_211_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_random_write_fu_211_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_random_write_fu_211_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_random_write_fu_211_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_random_write_fu_211_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_random_write_fu_211_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_random_write_fu_211_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_random_write_fu_211_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_random_write_fu_211_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_random_write_fu_211_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_random_write_fu_211_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_random_write_fu_211_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_random_write_fu_211_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_random_write_fu_211_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_random_write_fu_211_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_random_write_fu_211_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_random_write_fu_211_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_random_write_fu_211_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_random_write_fu_211_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_random_write_fu_211_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_random_write_fu_211_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_random_write_fu_211_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_random_write_fu_211_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_random_write_fu_211_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_random_write_fu_211_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_random_write_fu_211_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_random_write_fu_211_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_random_write_fu_211_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv256_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_random_write_fu_211_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        buffer_r_address0 => grp_random_write_fu_211_buffer_r_address0,
        buffer_r_ce0 => grp_random_write_fu_211_buffer_r_ce0,
        buffer_r_q0 => buffer_q0,
        size => size_reg_349,
        range_r => range_reg_360);

    grp_random_read_fu_220 : component hbm_traffic_gen_random_read
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_random_read_fu_220_ap_start,
        ap_done => grp_random_read_fu_220_ap_done,
        ap_idle => grp_random_read_fu_220_ap_idle,
        ap_ready => grp_random_read_fu_220_ap_ready,
        m_axi_gmem_AWVALID => grp_random_read_fu_220_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_random_read_fu_220_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_random_read_fu_220_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_random_read_fu_220_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_random_read_fu_220_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_random_read_fu_220_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_random_read_fu_220_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_random_read_fu_220_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_random_read_fu_220_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_random_read_fu_220_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_random_read_fu_220_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_random_read_fu_220_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_random_read_fu_220_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_random_read_fu_220_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_random_read_fu_220_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_random_read_fu_220_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_random_read_fu_220_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_random_read_fu_220_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_random_read_fu_220_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_random_read_fu_220_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_random_read_fu_220_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_random_read_fu_220_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_random_read_fu_220_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_random_read_fu_220_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_random_read_fu_220_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_random_read_fu_220_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_random_read_fu_220_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_random_read_fu_220_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_random_read_fu_220_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_random_read_fu_220_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_random_read_fu_220_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_random_read_fu_220_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        buffer_r_address1 => grp_random_read_fu_220_buffer_r_address1,
        buffer_r_ce1 => grp_random_read_fu_220_buffer_r_ce1,
        buffer_r_we1 => grp_random_read_fu_220_buffer_r_we1,
        buffer_r_d1 => grp_random_read_fu_220_buffer_r_d1,
        size => size_reg_349,
        range_r => range_reg_360);

    grp_seq_write_burst_fu_229 : component hbm_traffic_gen_seq_write_burst
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_seq_write_burst_fu_229_ap_start,
        ap_done => grp_seq_write_burst_fu_229_ap_done,
        ap_idle => grp_seq_write_burst_fu_229_ap_idle,
        ap_ready => grp_seq_write_burst_fu_229_ap_ready,
        m_axi_gmem_AWVALID => grp_seq_write_burst_fu_229_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_seq_write_burst_fu_229_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_seq_write_burst_fu_229_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_seq_write_burst_fu_229_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_seq_write_burst_fu_229_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_seq_write_burst_fu_229_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_seq_write_burst_fu_229_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_seq_write_burst_fu_229_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_seq_write_burst_fu_229_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_seq_write_burst_fu_229_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_seq_write_burst_fu_229_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_seq_write_burst_fu_229_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_seq_write_burst_fu_229_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_seq_write_burst_fu_229_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_seq_write_burst_fu_229_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_seq_write_burst_fu_229_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_seq_write_burst_fu_229_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_seq_write_burst_fu_229_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_seq_write_burst_fu_229_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_seq_write_burst_fu_229_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_seq_write_burst_fu_229_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_seq_write_burst_fu_229_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_seq_write_burst_fu_229_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_seq_write_burst_fu_229_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_seq_write_burst_fu_229_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_seq_write_burst_fu_229_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_seq_write_burst_fu_229_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_seq_write_burst_fu_229_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_seq_write_burst_fu_229_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_seq_write_burst_fu_229_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_seq_write_burst_fu_229_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv256_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_seq_write_burst_fu_229_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        buffer_r_address0 => grp_seq_write_burst_fu_229_buffer_r_address0,
        buffer_r_ce0 => grp_seq_write_burst_fu_229_buffer_r_ce0,
        buffer_r_q0 => buffer_q0,
        size => size_reg_349);

    grp_seq_write_fu_237 : component hbm_traffic_gen_seq_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_seq_write_fu_237_ap_start,
        ap_done => grp_seq_write_fu_237_ap_done,
        ap_idle => grp_seq_write_fu_237_ap_idle,
        ap_ready => grp_seq_write_fu_237_ap_ready,
        m_axi_gmem_AWVALID => grp_seq_write_fu_237_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_seq_write_fu_237_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_seq_write_fu_237_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_seq_write_fu_237_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_seq_write_fu_237_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_seq_write_fu_237_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_seq_write_fu_237_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_seq_write_fu_237_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_seq_write_fu_237_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_seq_write_fu_237_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_seq_write_fu_237_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_seq_write_fu_237_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_seq_write_fu_237_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_seq_write_fu_237_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_seq_write_fu_237_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_seq_write_fu_237_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_seq_write_fu_237_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_seq_write_fu_237_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_seq_write_fu_237_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_seq_write_fu_237_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_seq_write_fu_237_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_seq_write_fu_237_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_seq_write_fu_237_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_seq_write_fu_237_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_seq_write_fu_237_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_seq_write_fu_237_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_seq_write_fu_237_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_seq_write_fu_237_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_seq_write_fu_237_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_seq_write_fu_237_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_seq_write_fu_237_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv256_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_seq_write_fu_237_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        buffer_r_address0 => grp_seq_write_fu_237_buffer_r_address0,
        buffer_r_ce0 => grp_seq_write_fu_237_buffer_r_ce0,
        buffer_r_q0 => buffer_q0,
        size => size_reg_349);

    grp_seq_read_burst_fu_245 : component hbm_traffic_gen_seq_read_burst
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_seq_read_burst_fu_245_ap_start,
        ap_done => grp_seq_read_burst_fu_245_ap_done,
        ap_idle => grp_seq_read_burst_fu_245_ap_idle,
        ap_ready => grp_seq_read_burst_fu_245_ap_ready,
        m_axi_gmem_AWVALID => grp_seq_read_burst_fu_245_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_seq_read_burst_fu_245_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_seq_read_burst_fu_245_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_seq_read_burst_fu_245_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_seq_read_burst_fu_245_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_seq_read_burst_fu_245_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_seq_read_burst_fu_245_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_seq_read_burst_fu_245_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_seq_read_burst_fu_245_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_seq_read_burst_fu_245_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_seq_read_burst_fu_245_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_seq_read_burst_fu_245_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_seq_read_burst_fu_245_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_seq_read_burst_fu_245_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_seq_read_burst_fu_245_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_seq_read_burst_fu_245_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_seq_read_burst_fu_245_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_seq_read_burst_fu_245_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_seq_read_burst_fu_245_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_seq_read_burst_fu_245_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_seq_read_burst_fu_245_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_seq_read_burst_fu_245_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_seq_read_burst_fu_245_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_seq_read_burst_fu_245_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_seq_read_burst_fu_245_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_seq_read_burst_fu_245_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_seq_read_burst_fu_245_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_seq_read_burst_fu_245_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_seq_read_burst_fu_245_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_seq_read_burst_fu_245_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_seq_read_burst_fu_245_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_seq_read_burst_fu_245_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        buffer_r_address1 => grp_seq_read_burst_fu_245_buffer_r_address1,
        buffer_r_ce1 => grp_seq_read_burst_fu_245_buffer_r_ce1,
        buffer_r_we1 => grp_seq_read_burst_fu_245_buffer_r_we1,
        buffer_r_d1 => grp_seq_read_burst_fu_245_buffer_r_d1,
        size => size_reg_349);

    grp_seq_read_fu_253 : component hbm_traffic_gen_seq_read
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_seq_read_fu_253_ap_start,
        ap_done => grp_seq_read_fu_253_ap_done,
        ap_idle => grp_seq_read_fu_253_ap_idle,
        ap_ready => grp_seq_read_fu_253_ap_ready,
        m_axi_gmem_AWVALID => grp_seq_read_fu_253_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_seq_read_fu_253_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_seq_read_fu_253_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_seq_read_fu_253_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_seq_read_fu_253_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_seq_read_fu_253_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_seq_read_fu_253_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_seq_read_fu_253_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_seq_read_fu_253_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_seq_read_fu_253_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_seq_read_fu_253_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_seq_read_fu_253_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_seq_read_fu_253_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_seq_read_fu_253_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_seq_read_fu_253_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_seq_read_fu_253_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_seq_read_fu_253_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_seq_read_fu_253_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_seq_read_fu_253_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_seq_read_fu_253_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_seq_read_fu_253_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_seq_read_fu_253_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_seq_read_fu_253_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_seq_read_fu_253_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_seq_read_fu_253_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_seq_read_fu_253_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_seq_read_fu_253_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_seq_read_fu_253_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_seq_read_fu_253_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_seq_read_fu_253_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_seq_read_fu_253_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_seq_read_fu_253_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        buffer_r_address1 => grp_seq_read_fu_253_buffer_r_address1,
        buffer_r_ce1 => grp_seq_read_fu_253_buffer_r_ce1,
        buffer_r_we1 => grp_seq_read_fu_253_buffer_r_we1,
        buffer_r_d1 => grp_seq_read_fu_253_buffer_r_d1,
        size => size_reg_349);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_random_read_fu_220_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_random_read_fu_220_ap_start_reg <= ap_const_logic_0;
            else
                if (((pattern_reg_345 = ap_const_lv32_4) and (cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_random_read_fu_220_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_random_read_fu_220_ap_ready = ap_const_logic_1)) then 
                    grp_random_read_fu_220_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_random_read_write_fu_202_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_random_read_write_fu_202_ap_start_reg <= ap_const_logic_0;
            else
                if (((pattern_reg_345 = ap_const_lv32_6) and (cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_random_read_write_fu_202_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_random_read_write_fu_202_ap_ready = ap_const_logic_1)) then 
                    grp_random_read_write_fu_202_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_random_write_fu_211_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_random_write_fu_211_ap_start_reg <= ap_const_logic_0;
            else
                if (((pattern_reg_345 = ap_const_lv32_5) and (cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_random_write_fu_211_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_random_write_fu_211_ap_ready = ap_const_logic_1)) then 
                    grp_random_write_fu_211_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seq_read_burst_fu_245_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_seq_read_burst_fu_245_ap_start_reg <= ap_const_logic_0;
            else
                if (((pattern_reg_345 = ap_const_lv32_1) and (cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_seq_read_burst_fu_245_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seq_read_burst_fu_245_ap_ready = ap_const_logic_1)) then 
                    grp_seq_read_burst_fu_245_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seq_read_fu_253_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_seq_read_fu_253_ap_start_reg <= ap_const_logic_0;
            else
                if (((pattern_reg_345 = ap_const_lv32_0) and (cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_seq_read_fu_253_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seq_read_fu_253_ap_ready = ap_const_logic_1)) then 
                    grp_seq_read_fu_253_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seq_write_burst_fu_229_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_seq_write_burst_fu_229_ap_start_reg <= ap_const_logic_0;
            else
                if (((pattern_reg_345 = ap_const_lv32_3) and (cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_seq_write_burst_fu_229_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seq_write_burst_fu_229_ap_ready = ap_const_logic_1)) then 
                    grp_seq_write_burst_fu_229_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seq_write_fu_237_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_seq_write_fu_237_ap_start_reg <= ap_const_logic_0;
            else
                if (((pattern_reg_345 = ap_const_lv32_2) and (cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_seq_write_fu_237_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seq_write_fu_237_ap_ready = ap_const_logic_1)) then 
                    grp_seq_write_fu_237_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                cmd_addr_3_read_reg_367 <= cmd_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                cmd_addr_4_read_reg_375 <= cmd_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                cmd_read_reg_337 <= cmd_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                pattern_reg_345 <= cmd_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                range_reg_360 <= cmd_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                size_reg_349 <= cmd_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state49, ap_CS_fsm_state56, ap_CS_fsm_state9, ap_CS_fsm_state16, cmd_AWREADY, cmd_WREADY, cmd_ARREADY, cmd_RVALID, cmd_BVALID, ap_block_state18_io, ap_block_state33_on_subcall_done, ap_CS_fsm_state17, ap_CS_fsm_state41, ap_CS_fsm_state57, lnot4_fu_292_p2, lnot18_fu_297_p2, icmp_ln146_fu_302_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((cmd_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((cmd_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((cmd_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((cmd_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (lnot4_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if ((not(((cmd_RVALID = ap_const_logic_0) or (cmd_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if ((not(((cmd_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state33_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (lnot18_fu_297_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if (((cmd_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((cmd_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((cmd_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (icmp_ln146_fu_302_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state18_io_assign_proc : process(cmd_AWREADY, cmd_ARREADY)
    begin
                ap_block_state18_io <= ((cmd_ARREADY = ap_const_logic_0) or (cmd_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state33_on_subcall_done_assign_proc : process(pattern_reg_345, grp_random_read_write_fu_202_ap_done, grp_random_write_fu_211_ap_done, grp_random_read_fu_220_ap_done, grp_seq_write_burst_fu_229_ap_done, grp_seq_write_fu_237_ap_done, grp_seq_read_burst_fu_245_ap_done, grp_seq_read_fu_253_ap_done)
    begin
                ap_block_state33_on_subcall_done <= (((grp_seq_read_fu_253_ap_done = ap_const_logic_0) and (pattern_reg_345 = ap_const_lv32_0)) or ((grp_seq_read_burst_fu_245_ap_done = ap_const_logic_0) and (pattern_reg_345 = ap_const_lv32_1)) or ((grp_seq_write_fu_237_ap_done = ap_const_logic_0) and (pattern_reg_345 = ap_const_lv32_2)) or ((grp_seq_write_burst_fu_229_ap_done = ap_const_logic_0) and (pattern_reg_345 = ap_const_lv32_3)) or ((grp_random_read_fu_220_ap_done = ap_const_logic_0) and (pattern_reg_345 = ap_const_lv32_4)) or ((grp_random_write_fu_211_ap_done = ap_const_logic_0) and (pattern_reg_345 = ap_const_lv32_5)) or ((grp_random_read_write_fu_202_ap_done = ap_const_logic_0) and (pattern_reg_345 = ap_const_lv32_6)));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buffer_address0_assign_proc : process(ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_buffer_r_address0, grp_random_write_fu_211_buffer_r_address0, grp_seq_write_burst_fu_229_buffer_r_address0, grp_seq_write_fu_237_buffer_r_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
            if ((pattern_reg_345 = ap_const_lv32_2)) then 
                buffer_address0 <= grp_seq_write_fu_237_buffer_r_address0;
            elsif ((pattern_reg_345 = ap_const_lv32_3)) then 
                buffer_address0 <= grp_seq_write_burst_fu_229_buffer_r_address0;
            elsif ((pattern_reg_345 = ap_const_lv32_5)) then 
                buffer_address0 <= grp_random_write_fu_211_buffer_r_address0;
            elsif ((pattern_reg_345 = ap_const_lv32_6)) then 
                buffer_address0 <= grp_random_read_write_fu_202_buffer_r_address0;
            else 
                buffer_address0 <= "XXXXXXXXXX";
            end if;
        else 
            buffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_address1_assign_proc : process(ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_buffer_r_address1, grp_random_read_fu_220_buffer_r_address1, grp_seq_read_burst_fu_245_buffer_r_address1, grp_seq_read_fu_253_buffer_r_address1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
            if ((pattern_reg_345 = ap_const_lv32_0)) then 
                buffer_address1 <= grp_seq_read_fu_253_buffer_r_address1;
            elsif ((pattern_reg_345 = ap_const_lv32_1)) then 
                buffer_address1 <= grp_seq_read_burst_fu_245_buffer_r_address1;
            elsif ((pattern_reg_345 = ap_const_lv32_4)) then 
                buffer_address1 <= grp_random_read_fu_220_buffer_r_address1;
            elsif ((pattern_reg_345 = ap_const_lv32_6)) then 
                buffer_address1 <= grp_random_read_write_fu_202_buffer_r_address1;
            else 
                buffer_address1 <= "XXXXXXXXXX";
            end if;
        else 
            buffer_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_buffer_r_ce0, grp_random_write_fu_211_buffer_r_ce0, grp_seq_write_burst_fu_229_buffer_r_ce0, grp_seq_write_fu_237_buffer_r_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
            if ((pattern_reg_345 = ap_const_lv32_2)) then 
                buffer_ce0 <= grp_seq_write_fu_237_buffer_r_ce0;
            elsif ((pattern_reg_345 = ap_const_lv32_3)) then 
                buffer_ce0 <= grp_seq_write_burst_fu_229_buffer_r_ce0;
            elsif ((pattern_reg_345 = ap_const_lv32_5)) then 
                buffer_ce0 <= grp_random_write_fu_211_buffer_r_ce0;
            elsif ((pattern_reg_345 = ap_const_lv32_6)) then 
                buffer_ce0 <= grp_random_read_write_fu_202_buffer_r_ce0;
            else 
                buffer_ce0 <= ap_const_logic_0;
            end if;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_ce1_assign_proc : process(ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_buffer_r_ce1, grp_random_read_fu_220_buffer_r_ce1, grp_seq_read_burst_fu_245_buffer_r_ce1, grp_seq_read_fu_253_buffer_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
            if ((pattern_reg_345 = ap_const_lv32_0)) then 
                buffer_ce1 <= grp_seq_read_fu_253_buffer_r_ce1;
            elsif ((pattern_reg_345 = ap_const_lv32_1)) then 
                buffer_ce1 <= grp_seq_read_burst_fu_245_buffer_r_ce1;
            elsif ((pattern_reg_345 = ap_const_lv32_4)) then 
                buffer_ce1 <= grp_random_read_fu_220_buffer_r_ce1;
            elsif ((pattern_reg_345 = ap_const_lv32_6)) then 
                buffer_ce1 <= grp_random_read_write_fu_202_buffer_r_ce1;
            else 
                buffer_ce1 <= ap_const_logic_0;
            end if;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_d1_assign_proc : process(ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_buffer_r_d1, grp_random_read_fu_220_buffer_r_d1, grp_seq_read_burst_fu_245_buffer_r_d1, grp_seq_read_fu_253_buffer_r_d1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
            if ((pattern_reg_345 = ap_const_lv32_0)) then 
                buffer_d1 <= grp_seq_read_fu_253_buffer_r_d1;
            elsif ((pattern_reg_345 = ap_const_lv32_1)) then 
                buffer_d1 <= grp_seq_read_burst_fu_245_buffer_r_d1;
            elsif ((pattern_reg_345 = ap_const_lv32_4)) then 
                buffer_d1 <= grp_random_read_fu_220_buffer_r_d1;
            elsif ((pattern_reg_345 = ap_const_lv32_6)) then 
                buffer_d1 <= grp_random_read_write_fu_202_buffer_r_d1;
            else 
                buffer_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            buffer_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_we1_assign_proc : process(ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_buffer_r_we1, grp_random_read_fu_220_buffer_r_we1, grp_seq_read_burst_fu_245_buffer_r_we1, grp_seq_read_fu_253_buffer_r_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
            if ((pattern_reg_345 = ap_const_lv32_0)) then 
                buffer_we1 <= grp_seq_read_fu_253_buffer_r_we1;
            elsif ((pattern_reg_345 = ap_const_lv32_1)) then 
                buffer_we1 <= grp_seq_read_burst_fu_245_buffer_r_we1;
            elsif ((pattern_reg_345 = ap_const_lv32_4)) then 
                buffer_we1 <= grp_random_read_fu_220_buffer_r_we1;
            elsif ((pattern_reg_345 = ap_const_lv32_6)) then 
                buffer_we1 <= grp_random_read_write_fu_202_buffer_r_we1;
            else 
                buffer_we1 <= ap_const_logic_0;
            end if;
        else 
            buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;


    cmd_ARADDR_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state33, ap_CS_fsm_state49, ap_CS_fsm_state9, cmd_ARREADY, ap_block_state18_io, ap_block_state33_on_subcall_done)
    begin
        if (((cmd_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            cmd_ARADDR <= ap_const_lv64_7;
        elsif ((not(((cmd_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state33_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            cmd_ARADDR <= ap_const_lv64_3;
        elsif (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cmd_ARADDR <= ap_const_lv64_4;
        elsif (((cmd_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            cmd_ARADDR <= ap_const_lv64_0;
        else 
            cmd_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cmd_ARLEN_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state33, ap_CS_fsm_state49, ap_CS_fsm_state9, cmd_ARREADY, ap_block_state18_io, ap_block_state33_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cmd_ARLEN <= ap_const_lv32_3;
        elsif (((not(((cmd_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state33_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((cmd_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((cmd_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            cmd_ARLEN <= ap_const_lv32_1;
        else 
            cmd_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cmd_ARVALID_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state33, ap_CS_fsm_state49, ap_CS_fsm_state9, cmd_ARREADY, ap_block_state18_io, ap_block_state33_on_subcall_done)
    begin
        if (((not(((cmd_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state33_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((cmd_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((cmd_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            cmd_ARVALID <= ap_const_logic_1;
        else 
            cmd_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    cmd_AWADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state18, ap_CS_fsm_state42, cmd_AWREADY, cmd_addr_reg_307, ap_block_state18_io)
    begin
        if (((cmd_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            cmd_AWADDR <= ap_const_lv64_2;
        elsif (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cmd_AWADDR <= cmd_addr_reg_307;
        elsif (((cmd_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmd_AWADDR <= ap_const_lv64_1;
        else 
            cmd_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cmd_AWLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state18, ap_CS_fsm_state42, cmd_AWREADY, ap_block_state18_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((cmd_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            cmd_AWLEN <= ap_const_lv32_1;
        elsif (((cmd_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmd_AWLEN <= ap_const_lv32_2;
        else 
            cmd_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cmd_AWVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state18, ap_CS_fsm_state42, cmd_AWREADY, ap_block_state18_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((cmd_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((cmd_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            cmd_AWVALID <= ap_const_logic_1;
        else 
            cmd_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    cmd_BREADY_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state32, ap_CS_fsm_state48, cmd_BVALID)
    begin
        if ((((cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((cmd_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            cmd_BREADY <= ap_const_logic_1;
        else 
            cmd_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    cmd_RREADY_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state40, ap_CS_fsm_state56, ap_CS_fsm_state16, cmd_WREADY, cmd_RVALID)
    begin
        if ((((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((cmd_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or (not(((cmd_RVALID = ap_const_logic_0) or (cmd_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            cmd_RREADY <= ap_const_logic_1;
        else 
            cmd_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    cmd_WVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state27, ap_CS_fsm_state43, cmd_WREADY, cmd_RVALID)
    begin
        if (((not(((cmd_RVALID = ap_const_logic_0) or (cmd_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((cmd_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((cmd_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cmd_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            cmd_WVALID <= ap_const_logic_1;
        else 
            cmd_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    cmd_addr_reg_307 <= ap_const_lv64_1;

    cmd_blk_n_AR_assign_proc : process(m_axi_cmd_ARREADY, ap_CS_fsm_state18, ap_CS_fsm_state33, ap_CS_fsm_state49, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cmd_blk_n_AR <= m_axi_cmd_ARREADY;
        else 
            cmd_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    cmd_blk_n_AW_assign_proc : process(m_axi_cmd_AWREADY, ap_CS_fsm_state1, ap_CS_fsm_state18, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmd_blk_n_AW <= m_axi_cmd_AWREADY;
        else 
            cmd_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    cmd_blk_n_B_assign_proc : process(m_axi_cmd_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state32, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            cmd_blk_n_B <= m_axi_cmd_BVALID;
        else 
            cmd_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    cmd_blk_n_R_assign_proc : process(m_axi_cmd_RVALID, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state40, ap_CS_fsm_state56, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            cmd_blk_n_R <= m_axi_cmd_RVALID;
        else 
            cmd_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    cmd_blk_n_W_assign_proc : process(m_axi_cmd_WREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state27, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cmd_blk_n_W <= m_axi_cmd_WREADY;
        else 
            cmd_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARADDR, grp_random_read_fu_220_m_axi_gmem_ARADDR, grp_seq_read_burst_fu_245_m_axi_gmem_ARADDR, grp_seq_read_fu_253_m_axi_gmem_ARADDR)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARADDR <= grp_seq_read_fu_253_m_axi_gmem_ARADDR;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARADDR <= grp_seq_read_burst_fu_245_m_axi_gmem_ARADDR;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARADDR <= grp_random_read_fu_220_m_axi_gmem_ARADDR;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARADDR <= grp_random_read_write_fu_202_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARBURST, grp_random_read_fu_220_m_axi_gmem_ARBURST, grp_seq_read_burst_fu_245_m_axi_gmem_ARBURST, grp_seq_read_fu_253_m_axi_gmem_ARBURST)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARBURST <= grp_seq_read_fu_253_m_axi_gmem_ARBURST;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARBURST <= grp_seq_read_burst_fu_245_m_axi_gmem_ARBURST;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARBURST <= grp_random_read_fu_220_m_axi_gmem_ARBURST;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARBURST <= grp_random_read_write_fu_202_m_axi_gmem_ARBURST;
        else 
            gmem_ARBURST <= "XX";
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARCACHE, grp_random_read_fu_220_m_axi_gmem_ARCACHE, grp_seq_read_burst_fu_245_m_axi_gmem_ARCACHE, grp_seq_read_fu_253_m_axi_gmem_ARCACHE)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARCACHE <= grp_seq_read_fu_253_m_axi_gmem_ARCACHE;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARCACHE <= grp_seq_read_burst_fu_245_m_axi_gmem_ARCACHE;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARCACHE <= grp_random_read_fu_220_m_axi_gmem_ARCACHE;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARCACHE <= grp_random_read_write_fu_202_m_axi_gmem_ARCACHE;
        else 
            gmem_ARCACHE <= "XXXX";
        end if; 
    end process;


    gmem_ARID_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARID, grp_random_read_fu_220_m_axi_gmem_ARID, grp_seq_read_burst_fu_245_m_axi_gmem_ARID, grp_seq_read_fu_253_m_axi_gmem_ARID)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARID <= grp_seq_read_fu_253_m_axi_gmem_ARID;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARID <= grp_seq_read_burst_fu_245_m_axi_gmem_ARID;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARID <= grp_random_read_fu_220_m_axi_gmem_ARID;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARID <= grp_random_read_write_fu_202_m_axi_gmem_ARID;
        else 
            gmem_ARID <= "X";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARLEN, grp_random_read_fu_220_m_axi_gmem_ARLEN, grp_seq_read_burst_fu_245_m_axi_gmem_ARLEN, grp_seq_read_fu_253_m_axi_gmem_ARLEN)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARLEN <= grp_seq_read_fu_253_m_axi_gmem_ARLEN;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARLEN <= grp_seq_read_burst_fu_245_m_axi_gmem_ARLEN;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARLEN <= grp_random_read_fu_220_m_axi_gmem_ARLEN;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARLEN <= grp_random_read_write_fu_202_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARLOCK, grp_random_read_fu_220_m_axi_gmem_ARLOCK, grp_seq_read_burst_fu_245_m_axi_gmem_ARLOCK, grp_seq_read_fu_253_m_axi_gmem_ARLOCK)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARLOCK <= grp_seq_read_fu_253_m_axi_gmem_ARLOCK;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARLOCK <= grp_seq_read_burst_fu_245_m_axi_gmem_ARLOCK;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARLOCK <= grp_random_read_fu_220_m_axi_gmem_ARLOCK;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARLOCK <= grp_random_read_write_fu_202_m_axi_gmem_ARLOCK;
        else 
            gmem_ARLOCK <= "XX";
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARPROT, grp_random_read_fu_220_m_axi_gmem_ARPROT, grp_seq_read_burst_fu_245_m_axi_gmem_ARPROT, grp_seq_read_fu_253_m_axi_gmem_ARPROT)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARPROT <= grp_seq_read_fu_253_m_axi_gmem_ARPROT;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARPROT <= grp_seq_read_burst_fu_245_m_axi_gmem_ARPROT;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARPROT <= grp_random_read_fu_220_m_axi_gmem_ARPROT;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARPROT <= grp_random_read_write_fu_202_m_axi_gmem_ARPROT;
        else 
            gmem_ARPROT <= "XXX";
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARQOS, grp_random_read_fu_220_m_axi_gmem_ARQOS, grp_seq_read_burst_fu_245_m_axi_gmem_ARQOS, grp_seq_read_fu_253_m_axi_gmem_ARQOS)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARQOS <= grp_seq_read_fu_253_m_axi_gmem_ARQOS;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARQOS <= grp_seq_read_burst_fu_245_m_axi_gmem_ARQOS;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARQOS <= grp_random_read_fu_220_m_axi_gmem_ARQOS;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARQOS <= grp_random_read_write_fu_202_m_axi_gmem_ARQOS;
        else 
            gmem_ARQOS <= "XXXX";
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARREGION, grp_random_read_fu_220_m_axi_gmem_ARREGION, grp_seq_read_burst_fu_245_m_axi_gmem_ARREGION, grp_seq_read_fu_253_m_axi_gmem_ARREGION)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARREGION <= grp_seq_read_fu_253_m_axi_gmem_ARREGION;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARREGION <= grp_seq_read_burst_fu_245_m_axi_gmem_ARREGION;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARREGION <= grp_random_read_fu_220_m_axi_gmem_ARREGION;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARREGION <= grp_random_read_write_fu_202_m_axi_gmem_ARREGION;
        else 
            gmem_ARREGION <= "XXXX";
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARSIZE, grp_random_read_fu_220_m_axi_gmem_ARSIZE, grp_seq_read_burst_fu_245_m_axi_gmem_ARSIZE, grp_seq_read_fu_253_m_axi_gmem_ARSIZE)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARSIZE <= grp_seq_read_fu_253_m_axi_gmem_ARSIZE;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARSIZE <= grp_seq_read_burst_fu_245_m_axi_gmem_ARSIZE;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARSIZE <= grp_random_read_fu_220_m_axi_gmem_ARSIZE;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARSIZE <= grp_random_read_write_fu_202_m_axi_gmem_ARSIZE;
        else 
            gmem_ARSIZE <= "XXX";
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARUSER, grp_random_read_fu_220_m_axi_gmem_ARUSER, grp_seq_read_burst_fu_245_m_axi_gmem_ARUSER, grp_seq_read_fu_253_m_axi_gmem_ARUSER)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARUSER <= grp_seq_read_fu_253_m_axi_gmem_ARUSER;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARUSER <= grp_seq_read_burst_fu_245_m_axi_gmem_ARUSER;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARUSER <= grp_random_read_fu_220_m_axi_gmem_ARUSER;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARUSER <= grp_random_read_write_fu_202_m_axi_gmem_ARUSER;
        else 
            gmem_ARUSER <= "X";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_ARVALID, grp_random_read_fu_220_m_axi_gmem_ARVALID, grp_seq_read_burst_fu_245_m_axi_gmem_ARVALID, grp_seq_read_fu_253_m_axi_gmem_ARVALID)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARVALID <= grp_seq_read_fu_253_m_axi_gmem_ARVALID;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARVALID <= grp_seq_read_burst_fu_245_m_axi_gmem_ARVALID;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARVALID <= grp_random_read_fu_220_m_axi_gmem_ARVALID;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_ARVALID <= grp_random_read_write_fu_202_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWADDR, grp_random_write_fu_211_m_axi_gmem_AWADDR, grp_seq_write_burst_fu_229_m_axi_gmem_AWADDR, grp_seq_write_fu_237_m_axi_gmem_AWADDR)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWADDR <= grp_seq_write_fu_237_m_axi_gmem_AWADDR;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWADDR <= grp_seq_write_burst_fu_229_m_axi_gmem_AWADDR;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWADDR <= grp_random_write_fu_211_m_axi_gmem_AWADDR;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWADDR <= grp_random_read_write_fu_202_m_axi_gmem_AWADDR;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWBURST_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWBURST, grp_random_write_fu_211_m_axi_gmem_AWBURST, grp_seq_write_burst_fu_229_m_axi_gmem_AWBURST, grp_seq_write_fu_237_m_axi_gmem_AWBURST)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWBURST <= grp_seq_write_fu_237_m_axi_gmem_AWBURST;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWBURST <= grp_seq_write_burst_fu_229_m_axi_gmem_AWBURST;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWBURST <= grp_random_write_fu_211_m_axi_gmem_AWBURST;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWBURST <= grp_random_read_write_fu_202_m_axi_gmem_AWBURST;
        else 
            gmem_AWBURST <= "XX";
        end if; 
    end process;


    gmem_AWCACHE_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWCACHE, grp_random_write_fu_211_m_axi_gmem_AWCACHE, grp_seq_write_burst_fu_229_m_axi_gmem_AWCACHE, grp_seq_write_fu_237_m_axi_gmem_AWCACHE)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWCACHE <= grp_seq_write_fu_237_m_axi_gmem_AWCACHE;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWCACHE <= grp_seq_write_burst_fu_229_m_axi_gmem_AWCACHE;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWCACHE <= grp_random_write_fu_211_m_axi_gmem_AWCACHE;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWCACHE <= grp_random_read_write_fu_202_m_axi_gmem_AWCACHE;
        else 
            gmem_AWCACHE <= "XXXX";
        end if; 
    end process;


    gmem_AWID_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWID, grp_random_write_fu_211_m_axi_gmem_AWID, grp_seq_write_burst_fu_229_m_axi_gmem_AWID, grp_seq_write_fu_237_m_axi_gmem_AWID)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWID <= grp_seq_write_fu_237_m_axi_gmem_AWID;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWID <= grp_seq_write_burst_fu_229_m_axi_gmem_AWID;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWID <= grp_random_write_fu_211_m_axi_gmem_AWID;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWID <= grp_random_read_write_fu_202_m_axi_gmem_AWID;
        else 
            gmem_AWID <= "X";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWLEN, grp_random_write_fu_211_m_axi_gmem_AWLEN, grp_seq_write_burst_fu_229_m_axi_gmem_AWLEN, grp_seq_write_fu_237_m_axi_gmem_AWLEN)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWLEN <= grp_seq_write_fu_237_m_axi_gmem_AWLEN;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWLEN <= grp_seq_write_burst_fu_229_m_axi_gmem_AWLEN;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWLEN <= grp_random_write_fu_211_m_axi_gmem_AWLEN;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWLEN <= grp_random_read_write_fu_202_m_axi_gmem_AWLEN;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLOCK_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWLOCK, grp_random_write_fu_211_m_axi_gmem_AWLOCK, grp_seq_write_burst_fu_229_m_axi_gmem_AWLOCK, grp_seq_write_fu_237_m_axi_gmem_AWLOCK)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWLOCK <= grp_seq_write_fu_237_m_axi_gmem_AWLOCK;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWLOCK <= grp_seq_write_burst_fu_229_m_axi_gmem_AWLOCK;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWLOCK <= grp_random_write_fu_211_m_axi_gmem_AWLOCK;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWLOCK <= grp_random_read_write_fu_202_m_axi_gmem_AWLOCK;
        else 
            gmem_AWLOCK <= "XX";
        end if; 
    end process;


    gmem_AWPROT_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWPROT, grp_random_write_fu_211_m_axi_gmem_AWPROT, grp_seq_write_burst_fu_229_m_axi_gmem_AWPROT, grp_seq_write_fu_237_m_axi_gmem_AWPROT)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWPROT <= grp_seq_write_fu_237_m_axi_gmem_AWPROT;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWPROT <= grp_seq_write_burst_fu_229_m_axi_gmem_AWPROT;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWPROT <= grp_random_write_fu_211_m_axi_gmem_AWPROT;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWPROT <= grp_random_read_write_fu_202_m_axi_gmem_AWPROT;
        else 
            gmem_AWPROT <= "XXX";
        end if; 
    end process;


    gmem_AWQOS_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWQOS, grp_random_write_fu_211_m_axi_gmem_AWQOS, grp_seq_write_burst_fu_229_m_axi_gmem_AWQOS, grp_seq_write_fu_237_m_axi_gmem_AWQOS)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWQOS <= grp_seq_write_fu_237_m_axi_gmem_AWQOS;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWQOS <= grp_seq_write_burst_fu_229_m_axi_gmem_AWQOS;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWQOS <= grp_random_write_fu_211_m_axi_gmem_AWQOS;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWQOS <= grp_random_read_write_fu_202_m_axi_gmem_AWQOS;
        else 
            gmem_AWQOS <= "XXXX";
        end if; 
    end process;


    gmem_AWREGION_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWREGION, grp_random_write_fu_211_m_axi_gmem_AWREGION, grp_seq_write_burst_fu_229_m_axi_gmem_AWREGION, grp_seq_write_fu_237_m_axi_gmem_AWREGION)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWREGION <= grp_seq_write_fu_237_m_axi_gmem_AWREGION;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWREGION <= grp_seq_write_burst_fu_229_m_axi_gmem_AWREGION;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWREGION <= grp_random_write_fu_211_m_axi_gmem_AWREGION;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWREGION <= grp_random_read_write_fu_202_m_axi_gmem_AWREGION;
        else 
            gmem_AWREGION <= "XXXX";
        end if; 
    end process;


    gmem_AWSIZE_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWSIZE, grp_random_write_fu_211_m_axi_gmem_AWSIZE, grp_seq_write_burst_fu_229_m_axi_gmem_AWSIZE, grp_seq_write_fu_237_m_axi_gmem_AWSIZE)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWSIZE <= grp_seq_write_fu_237_m_axi_gmem_AWSIZE;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWSIZE <= grp_seq_write_burst_fu_229_m_axi_gmem_AWSIZE;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWSIZE <= grp_random_write_fu_211_m_axi_gmem_AWSIZE;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWSIZE <= grp_random_read_write_fu_202_m_axi_gmem_AWSIZE;
        else 
            gmem_AWSIZE <= "XXX";
        end if; 
    end process;


    gmem_AWUSER_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWUSER, grp_random_write_fu_211_m_axi_gmem_AWUSER, grp_seq_write_burst_fu_229_m_axi_gmem_AWUSER, grp_seq_write_fu_237_m_axi_gmem_AWUSER)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWUSER <= grp_seq_write_fu_237_m_axi_gmem_AWUSER;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWUSER <= grp_seq_write_burst_fu_229_m_axi_gmem_AWUSER;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWUSER <= grp_random_write_fu_211_m_axi_gmem_AWUSER;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWUSER <= grp_random_read_write_fu_202_m_axi_gmem_AWUSER;
        else 
            gmem_AWUSER <= "X";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_AWVALID, grp_random_write_fu_211_m_axi_gmem_AWVALID, grp_seq_write_burst_fu_229_m_axi_gmem_AWVALID, grp_seq_write_fu_237_m_axi_gmem_AWVALID)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWVALID <= grp_seq_write_fu_237_m_axi_gmem_AWVALID;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWVALID <= grp_seq_write_burst_fu_229_m_axi_gmem_AWVALID;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWVALID <= grp_random_write_fu_211_m_axi_gmem_AWVALID;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_AWVALID <= grp_random_read_write_fu_202_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_BREADY, grp_random_write_fu_211_m_axi_gmem_BREADY, grp_seq_write_burst_fu_229_m_axi_gmem_BREADY, grp_seq_write_fu_237_m_axi_gmem_BREADY)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_BREADY <= grp_seq_write_fu_237_m_axi_gmem_BREADY;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_BREADY <= grp_seq_write_burst_fu_229_m_axi_gmem_BREADY;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_BREADY <= grp_random_write_fu_211_m_axi_gmem_BREADY;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_BREADY <= grp_random_read_write_fu_202_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_RREADY, grp_random_read_fu_220_m_axi_gmem_RREADY, grp_seq_read_burst_fu_245_m_axi_gmem_RREADY, grp_seq_read_fu_253_m_axi_gmem_RREADY)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_RREADY <= grp_seq_read_fu_253_m_axi_gmem_RREADY;
        elsif ((((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_RREADY <= grp_seq_read_burst_fu_245_m_axi_gmem_RREADY;
        elsif ((((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_RREADY <= grp_random_read_fu_220_m_axi_gmem_RREADY;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_RREADY <= grp_random_read_write_fu_202_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_WDATA, grp_random_write_fu_211_m_axi_gmem_WDATA, grp_seq_write_burst_fu_229_m_axi_gmem_WDATA, grp_seq_write_fu_237_m_axi_gmem_WDATA)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WDATA <= grp_seq_write_fu_237_m_axi_gmem_WDATA;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WDATA <= grp_seq_write_burst_fu_229_m_axi_gmem_WDATA;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WDATA <= grp_random_write_fu_211_m_axi_gmem_WDATA;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WDATA <= grp_random_read_write_fu_202_m_axi_gmem_WDATA;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WID_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_WID, grp_random_write_fu_211_m_axi_gmem_WID, grp_seq_write_burst_fu_229_m_axi_gmem_WID, grp_seq_write_fu_237_m_axi_gmem_WID)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WID <= grp_seq_write_fu_237_m_axi_gmem_WID;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WID <= grp_seq_write_burst_fu_229_m_axi_gmem_WID;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WID <= grp_random_write_fu_211_m_axi_gmem_WID;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WID <= grp_random_read_write_fu_202_m_axi_gmem_WID;
        else 
            gmem_WID <= "X";
        end if; 
    end process;


    gmem_WLAST_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_WLAST, grp_random_write_fu_211_m_axi_gmem_WLAST, grp_seq_write_burst_fu_229_m_axi_gmem_WLAST, grp_seq_write_fu_237_m_axi_gmem_WLAST)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WLAST <= grp_seq_write_fu_237_m_axi_gmem_WLAST;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WLAST <= grp_seq_write_burst_fu_229_m_axi_gmem_WLAST;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WLAST <= grp_random_write_fu_211_m_axi_gmem_WLAST;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WLAST <= grp_random_read_write_fu_202_m_axi_gmem_WLAST;
        else 
            gmem_WLAST <= 'X';
        end if; 
    end process;


    gmem_WSTRB_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_WSTRB, grp_random_write_fu_211_m_axi_gmem_WSTRB, grp_seq_write_burst_fu_229_m_axi_gmem_WSTRB, grp_seq_write_fu_237_m_axi_gmem_WSTRB)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WSTRB <= grp_seq_write_fu_237_m_axi_gmem_WSTRB;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WSTRB <= grp_seq_write_burst_fu_229_m_axi_gmem_WSTRB;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WSTRB <= grp_random_write_fu_211_m_axi_gmem_WSTRB;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WSTRB <= grp_random_read_write_fu_202_m_axi_gmem_WSTRB;
        else 
            gmem_WSTRB <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WUSER_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_WUSER, grp_random_write_fu_211_m_axi_gmem_WUSER, grp_seq_write_burst_fu_229_m_axi_gmem_WUSER, grp_seq_write_fu_237_m_axi_gmem_WUSER)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WUSER <= grp_seq_write_fu_237_m_axi_gmem_WUSER;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WUSER <= grp_seq_write_burst_fu_229_m_axi_gmem_WUSER;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WUSER <= grp_random_write_fu_211_m_axi_gmem_WUSER;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WUSER <= grp_random_read_write_fu_202_m_axi_gmem_WUSER;
        else 
            gmem_WUSER <= "X";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, pattern_reg_345, grp_random_read_write_fu_202_m_axi_gmem_WVALID, grp_random_write_fu_211_m_axi_gmem_WVALID, grp_seq_write_burst_fu_229_m_axi_gmem_WVALID, grp_seq_write_fu_237_m_axi_gmem_WVALID)
    begin
        if ((((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WVALID <= grp_seq_write_fu_237_m_axi_gmem_WVALID;
        elsif ((((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WVALID <= grp_seq_write_burst_fu_229_m_axi_gmem_WVALID;
        elsif ((((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WVALID <= grp_random_write_fu_211_m_axi_gmem_WVALID;
        elsif ((((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pattern_reg_345 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            gmem_WVALID <= grp_random_read_write_fu_202_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_random_read_fu_220_ap_start <= grp_random_read_fu_220_ap_start_reg;
    grp_random_read_write_fu_202_ap_start <= grp_random_read_write_fu_202_ap_start_reg;
    grp_random_write_fu_211_ap_start <= grp_random_write_fu_211_ap_start_reg;
    grp_seq_read_burst_fu_245_ap_start <= grp_seq_read_burst_fu_245_ap_start_reg;
    grp_seq_read_fu_253_ap_start <= grp_seq_read_fu_253_ap_start_reg;
    grp_seq_write_burst_fu_229_ap_start <= grp_seq_write_burst_fu_229_ap_start_reg;
    grp_seq_write_fu_237_ap_start <= grp_seq_write_fu_237_ap_start_reg;
    icmp_ln146_fu_302_p2 <= "1" when (cmd_addr_4_read_reg_375 = ap_const_lv32_0) else "0";
    lnot18_fu_297_p2 <= "1" when (cmd_addr_3_read_reg_367 = ap_const_lv32_0) else "0";
    lnot4_fu_292_p2 <= "1" when (cmd_read_reg_337 = ap_const_lv32_0) else "0";
end behav;
