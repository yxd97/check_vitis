// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hbm_traffic_gen_random_read_write (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1,
        size,
        range_r
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state47 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [255:0] m_axi_gmem_WDATA;
output  [31:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [255:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [255:0] buffer_r_q0;
output  [9:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [255:0] buffer_r_d1;
input  [31:0] size;
input  [31:0] range_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;
reg buffer_r_ce0;
reg buffer_r_ce1;
reg buffer_r_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
reg    ap_enable_reg_pp0_iter36;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_3_reg_311;
reg   [0:0] tmp_3_reg_311_pp0_iter35_reg;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter37;
reg   [0:0] tmp_3_reg_311_pp0_iter36_reg;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter42;
reg   [0:0] tmp_3_reg_311_pp0_iter41_reg;
reg    gmem_blk_n_AR;
reg    gmem_blk_n_R;
reg    ap_enable_reg_pp0_iter43;
reg   [0:0] tmp_3_reg_311_pp0_iter42_reg;
reg   [31:0] i_reg_130;
reg   [31:0] rng_state_reg_141;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
reg    ap_block_state38_io;
wire    ap_block_state39_pp0_stage0_iter37;
reg    ap_block_state39_io;
wire    ap_block_state40_pp0_stage0_iter38;
wire    ap_block_state41_pp0_stage0_iter39;
wire    ap_block_state42_pp0_stage0_iter40;
wire    ap_block_state43_pp0_stage0_iter41;
reg    ap_block_state44_pp0_stage0_iter42;
reg    ap_block_state45_pp0_stage0_iter43;
wire    ap_block_state46_pp0_stage0_iter44;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] add_ln115_fu_167_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln115_fu_173_p2;
reg   [0:0] icmp_ln115_reg_307;
reg   [0:0] icmp_ln115_reg_307_pp0_iter1_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter2_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter3_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter4_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter5_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter6_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter7_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter8_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter9_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter10_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter11_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter12_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter13_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter14_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter15_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter16_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter17_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter18_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter19_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter20_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter21_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter22_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter23_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter24_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter25_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter26_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter27_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter28_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter29_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter30_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter31_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter32_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter33_reg;
reg   [0:0] icmp_ln115_reg_307_pp0_iter34_reg;
wire   [0:0] tmp_3_fu_183_p3;
reg   [0:0] tmp_3_reg_311_pp0_iter1_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter2_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter3_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter4_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter5_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter6_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter7_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter8_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter9_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter10_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter11_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter12_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter13_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter14_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter15_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter16_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter17_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter18_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter19_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter20_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter21_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter22_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter23_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter24_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter25_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter26_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter27_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter28_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter29_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter30_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter31_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter32_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter33_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter34_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter37_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter38_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter39_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter40_reg;
reg   [0:0] tmp_3_reg_311_pp0_iter43_reg;
reg   [9:0] buffer_addr_reg_315;
reg   [9:0] buffer_addr_reg_315_pp0_iter1_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter2_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter3_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter4_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter5_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter6_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter7_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter8_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter9_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter10_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter11_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter12_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter13_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter14_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter15_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter16_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter17_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter18_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter19_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter20_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter21_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter22_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter23_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter24_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter25_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter26_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter27_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter28_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter29_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter30_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter31_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter32_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter33_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter34_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter35_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter36_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter37_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter38_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter39_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter40_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter41_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter42_reg;
reg   [9:0] buffer_addr_reg_315_pp0_iter43_reg;
wire   [31:0] rng_state_2_fu_273_p4;
reg   [31:0] rng_state_2_reg_321;
wire   [31:0] grp_fu_283_p2;
reg   [31:0] urem_ln121_reg_327;
reg   [255:0] buffer_load_reg_332;
reg   [255:0] gmem_addr_read_reg_337;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter44;
reg   [31:0] ap_phi_mux_rng_state_phi_fu_145_p4;
wire   [63:0] zext_ln115_fu_178_p1;
wire   [63:0] zext_ln121_fu_288_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] trunc_ln65_fu_191_p1;
wire   [0:0] tmp_4_fu_195_p3;
wire   [0:0] tmp_5_fu_203_p3;
wire   [0:0] xor_ln66_4_fu_217_p2;
wire   [0:0] xor_ln66_3_fu_211_p2;
wire   [0:0] tmp_6_fu_239_p3;
wire   [0:0] tmp_7_fu_247_p3;
wire   [0:0] xor_ln66_6_fu_261_p2;
wire   [0:0] xor_ln66_5_fu_255_p2;
wire   [0:0] xor_ln66_1_fu_267_p2;
wire   [0:0] xor_ln66_fu_223_p2;
wire   [29:0] tmp_fu_229_p4;
wire   [31:0] grp_fu_283_p0;
reg    grp_fu_283_ce;
wire    ap_CS_fsm_state47;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
end

hbm_traffic_gen_urem_32ns_32ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
urem_32ns_32ns_32_36_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_283_p0),
    .din1(range_r),
    .ce(grp_fu_283_ce),
    .dout(grp_fu_283_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter44 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln115_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_130 <= add_ln115_fu_167_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_130 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln115_reg_307 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rng_state_reg_141 <= rng_state_2_reg_321;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rng_state_reg_141 <= 32'd3736059631;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln115_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_addr_reg_315 <= zext_ln115_fu_178_p1;
        tmp_3_reg_311 <= ap_phi_mux_rng_state_phi_fu_145_p4[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        buffer_addr_reg_315_pp0_iter10_reg <= buffer_addr_reg_315_pp0_iter9_reg;
        buffer_addr_reg_315_pp0_iter11_reg <= buffer_addr_reg_315_pp0_iter10_reg;
        buffer_addr_reg_315_pp0_iter12_reg <= buffer_addr_reg_315_pp0_iter11_reg;
        buffer_addr_reg_315_pp0_iter13_reg <= buffer_addr_reg_315_pp0_iter12_reg;
        buffer_addr_reg_315_pp0_iter14_reg <= buffer_addr_reg_315_pp0_iter13_reg;
        buffer_addr_reg_315_pp0_iter15_reg <= buffer_addr_reg_315_pp0_iter14_reg;
        buffer_addr_reg_315_pp0_iter16_reg <= buffer_addr_reg_315_pp0_iter15_reg;
        buffer_addr_reg_315_pp0_iter17_reg <= buffer_addr_reg_315_pp0_iter16_reg;
        buffer_addr_reg_315_pp0_iter18_reg <= buffer_addr_reg_315_pp0_iter17_reg;
        buffer_addr_reg_315_pp0_iter19_reg <= buffer_addr_reg_315_pp0_iter18_reg;
        buffer_addr_reg_315_pp0_iter20_reg <= buffer_addr_reg_315_pp0_iter19_reg;
        buffer_addr_reg_315_pp0_iter21_reg <= buffer_addr_reg_315_pp0_iter20_reg;
        buffer_addr_reg_315_pp0_iter22_reg <= buffer_addr_reg_315_pp0_iter21_reg;
        buffer_addr_reg_315_pp0_iter23_reg <= buffer_addr_reg_315_pp0_iter22_reg;
        buffer_addr_reg_315_pp0_iter24_reg <= buffer_addr_reg_315_pp0_iter23_reg;
        buffer_addr_reg_315_pp0_iter25_reg <= buffer_addr_reg_315_pp0_iter24_reg;
        buffer_addr_reg_315_pp0_iter26_reg <= buffer_addr_reg_315_pp0_iter25_reg;
        buffer_addr_reg_315_pp0_iter27_reg <= buffer_addr_reg_315_pp0_iter26_reg;
        buffer_addr_reg_315_pp0_iter28_reg <= buffer_addr_reg_315_pp0_iter27_reg;
        buffer_addr_reg_315_pp0_iter29_reg <= buffer_addr_reg_315_pp0_iter28_reg;
        buffer_addr_reg_315_pp0_iter2_reg <= buffer_addr_reg_315_pp0_iter1_reg;
        buffer_addr_reg_315_pp0_iter30_reg <= buffer_addr_reg_315_pp0_iter29_reg;
        buffer_addr_reg_315_pp0_iter31_reg <= buffer_addr_reg_315_pp0_iter30_reg;
        buffer_addr_reg_315_pp0_iter32_reg <= buffer_addr_reg_315_pp0_iter31_reg;
        buffer_addr_reg_315_pp0_iter33_reg <= buffer_addr_reg_315_pp0_iter32_reg;
        buffer_addr_reg_315_pp0_iter34_reg <= buffer_addr_reg_315_pp0_iter33_reg;
        buffer_addr_reg_315_pp0_iter35_reg <= buffer_addr_reg_315_pp0_iter34_reg;
        buffer_addr_reg_315_pp0_iter36_reg <= buffer_addr_reg_315_pp0_iter35_reg;
        buffer_addr_reg_315_pp0_iter37_reg <= buffer_addr_reg_315_pp0_iter36_reg;
        buffer_addr_reg_315_pp0_iter38_reg <= buffer_addr_reg_315_pp0_iter37_reg;
        buffer_addr_reg_315_pp0_iter39_reg <= buffer_addr_reg_315_pp0_iter38_reg;
        buffer_addr_reg_315_pp0_iter3_reg <= buffer_addr_reg_315_pp0_iter2_reg;
        buffer_addr_reg_315_pp0_iter40_reg <= buffer_addr_reg_315_pp0_iter39_reg;
        buffer_addr_reg_315_pp0_iter41_reg <= buffer_addr_reg_315_pp0_iter40_reg;
        buffer_addr_reg_315_pp0_iter42_reg <= buffer_addr_reg_315_pp0_iter41_reg;
        buffer_addr_reg_315_pp0_iter43_reg <= buffer_addr_reg_315_pp0_iter42_reg;
        buffer_addr_reg_315_pp0_iter4_reg <= buffer_addr_reg_315_pp0_iter3_reg;
        buffer_addr_reg_315_pp0_iter5_reg <= buffer_addr_reg_315_pp0_iter4_reg;
        buffer_addr_reg_315_pp0_iter6_reg <= buffer_addr_reg_315_pp0_iter5_reg;
        buffer_addr_reg_315_pp0_iter7_reg <= buffer_addr_reg_315_pp0_iter6_reg;
        buffer_addr_reg_315_pp0_iter8_reg <= buffer_addr_reg_315_pp0_iter7_reg;
        buffer_addr_reg_315_pp0_iter9_reg <= buffer_addr_reg_315_pp0_iter8_reg;
        icmp_ln115_reg_307_pp0_iter10_reg <= icmp_ln115_reg_307_pp0_iter9_reg;
        icmp_ln115_reg_307_pp0_iter11_reg <= icmp_ln115_reg_307_pp0_iter10_reg;
        icmp_ln115_reg_307_pp0_iter12_reg <= icmp_ln115_reg_307_pp0_iter11_reg;
        icmp_ln115_reg_307_pp0_iter13_reg <= icmp_ln115_reg_307_pp0_iter12_reg;
        icmp_ln115_reg_307_pp0_iter14_reg <= icmp_ln115_reg_307_pp0_iter13_reg;
        icmp_ln115_reg_307_pp0_iter15_reg <= icmp_ln115_reg_307_pp0_iter14_reg;
        icmp_ln115_reg_307_pp0_iter16_reg <= icmp_ln115_reg_307_pp0_iter15_reg;
        icmp_ln115_reg_307_pp0_iter17_reg <= icmp_ln115_reg_307_pp0_iter16_reg;
        icmp_ln115_reg_307_pp0_iter18_reg <= icmp_ln115_reg_307_pp0_iter17_reg;
        icmp_ln115_reg_307_pp0_iter19_reg <= icmp_ln115_reg_307_pp0_iter18_reg;
        icmp_ln115_reg_307_pp0_iter20_reg <= icmp_ln115_reg_307_pp0_iter19_reg;
        icmp_ln115_reg_307_pp0_iter21_reg <= icmp_ln115_reg_307_pp0_iter20_reg;
        icmp_ln115_reg_307_pp0_iter22_reg <= icmp_ln115_reg_307_pp0_iter21_reg;
        icmp_ln115_reg_307_pp0_iter23_reg <= icmp_ln115_reg_307_pp0_iter22_reg;
        icmp_ln115_reg_307_pp0_iter24_reg <= icmp_ln115_reg_307_pp0_iter23_reg;
        icmp_ln115_reg_307_pp0_iter25_reg <= icmp_ln115_reg_307_pp0_iter24_reg;
        icmp_ln115_reg_307_pp0_iter26_reg <= icmp_ln115_reg_307_pp0_iter25_reg;
        icmp_ln115_reg_307_pp0_iter27_reg <= icmp_ln115_reg_307_pp0_iter26_reg;
        icmp_ln115_reg_307_pp0_iter28_reg <= icmp_ln115_reg_307_pp0_iter27_reg;
        icmp_ln115_reg_307_pp0_iter29_reg <= icmp_ln115_reg_307_pp0_iter28_reg;
        icmp_ln115_reg_307_pp0_iter2_reg <= icmp_ln115_reg_307_pp0_iter1_reg;
        icmp_ln115_reg_307_pp0_iter30_reg <= icmp_ln115_reg_307_pp0_iter29_reg;
        icmp_ln115_reg_307_pp0_iter31_reg <= icmp_ln115_reg_307_pp0_iter30_reg;
        icmp_ln115_reg_307_pp0_iter32_reg <= icmp_ln115_reg_307_pp0_iter31_reg;
        icmp_ln115_reg_307_pp0_iter33_reg <= icmp_ln115_reg_307_pp0_iter32_reg;
        icmp_ln115_reg_307_pp0_iter34_reg <= icmp_ln115_reg_307_pp0_iter33_reg;
        icmp_ln115_reg_307_pp0_iter3_reg <= icmp_ln115_reg_307_pp0_iter2_reg;
        icmp_ln115_reg_307_pp0_iter4_reg <= icmp_ln115_reg_307_pp0_iter3_reg;
        icmp_ln115_reg_307_pp0_iter5_reg <= icmp_ln115_reg_307_pp0_iter4_reg;
        icmp_ln115_reg_307_pp0_iter6_reg <= icmp_ln115_reg_307_pp0_iter5_reg;
        icmp_ln115_reg_307_pp0_iter7_reg <= icmp_ln115_reg_307_pp0_iter6_reg;
        icmp_ln115_reg_307_pp0_iter8_reg <= icmp_ln115_reg_307_pp0_iter7_reg;
        icmp_ln115_reg_307_pp0_iter9_reg <= icmp_ln115_reg_307_pp0_iter8_reg;
        tmp_3_reg_311_pp0_iter10_reg <= tmp_3_reg_311_pp0_iter9_reg;
        tmp_3_reg_311_pp0_iter11_reg <= tmp_3_reg_311_pp0_iter10_reg;
        tmp_3_reg_311_pp0_iter12_reg <= tmp_3_reg_311_pp0_iter11_reg;
        tmp_3_reg_311_pp0_iter13_reg <= tmp_3_reg_311_pp0_iter12_reg;
        tmp_3_reg_311_pp0_iter14_reg <= tmp_3_reg_311_pp0_iter13_reg;
        tmp_3_reg_311_pp0_iter15_reg <= tmp_3_reg_311_pp0_iter14_reg;
        tmp_3_reg_311_pp0_iter16_reg <= tmp_3_reg_311_pp0_iter15_reg;
        tmp_3_reg_311_pp0_iter17_reg <= tmp_3_reg_311_pp0_iter16_reg;
        tmp_3_reg_311_pp0_iter18_reg <= tmp_3_reg_311_pp0_iter17_reg;
        tmp_3_reg_311_pp0_iter19_reg <= tmp_3_reg_311_pp0_iter18_reg;
        tmp_3_reg_311_pp0_iter20_reg <= tmp_3_reg_311_pp0_iter19_reg;
        tmp_3_reg_311_pp0_iter21_reg <= tmp_3_reg_311_pp0_iter20_reg;
        tmp_3_reg_311_pp0_iter22_reg <= tmp_3_reg_311_pp0_iter21_reg;
        tmp_3_reg_311_pp0_iter23_reg <= tmp_3_reg_311_pp0_iter22_reg;
        tmp_3_reg_311_pp0_iter24_reg <= tmp_3_reg_311_pp0_iter23_reg;
        tmp_3_reg_311_pp0_iter25_reg <= tmp_3_reg_311_pp0_iter24_reg;
        tmp_3_reg_311_pp0_iter26_reg <= tmp_3_reg_311_pp0_iter25_reg;
        tmp_3_reg_311_pp0_iter27_reg <= tmp_3_reg_311_pp0_iter26_reg;
        tmp_3_reg_311_pp0_iter28_reg <= tmp_3_reg_311_pp0_iter27_reg;
        tmp_3_reg_311_pp0_iter29_reg <= tmp_3_reg_311_pp0_iter28_reg;
        tmp_3_reg_311_pp0_iter2_reg <= tmp_3_reg_311_pp0_iter1_reg;
        tmp_3_reg_311_pp0_iter30_reg <= tmp_3_reg_311_pp0_iter29_reg;
        tmp_3_reg_311_pp0_iter31_reg <= tmp_3_reg_311_pp0_iter30_reg;
        tmp_3_reg_311_pp0_iter32_reg <= tmp_3_reg_311_pp0_iter31_reg;
        tmp_3_reg_311_pp0_iter33_reg <= tmp_3_reg_311_pp0_iter32_reg;
        tmp_3_reg_311_pp0_iter34_reg <= tmp_3_reg_311_pp0_iter33_reg;
        tmp_3_reg_311_pp0_iter35_reg <= tmp_3_reg_311_pp0_iter34_reg;
        tmp_3_reg_311_pp0_iter36_reg <= tmp_3_reg_311_pp0_iter35_reg;
        tmp_3_reg_311_pp0_iter37_reg <= tmp_3_reg_311_pp0_iter36_reg;
        tmp_3_reg_311_pp0_iter38_reg <= tmp_3_reg_311_pp0_iter37_reg;
        tmp_3_reg_311_pp0_iter39_reg <= tmp_3_reg_311_pp0_iter38_reg;
        tmp_3_reg_311_pp0_iter3_reg <= tmp_3_reg_311_pp0_iter2_reg;
        tmp_3_reg_311_pp0_iter40_reg <= tmp_3_reg_311_pp0_iter39_reg;
        tmp_3_reg_311_pp0_iter41_reg <= tmp_3_reg_311_pp0_iter40_reg;
        tmp_3_reg_311_pp0_iter42_reg <= tmp_3_reg_311_pp0_iter41_reg;
        tmp_3_reg_311_pp0_iter43_reg <= tmp_3_reg_311_pp0_iter42_reg;
        tmp_3_reg_311_pp0_iter4_reg <= tmp_3_reg_311_pp0_iter3_reg;
        tmp_3_reg_311_pp0_iter5_reg <= tmp_3_reg_311_pp0_iter4_reg;
        tmp_3_reg_311_pp0_iter6_reg <= tmp_3_reg_311_pp0_iter5_reg;
        tmp_3_reg_311_pp0_iter7_reg <= tmp_3_reg_311_pp0_iter6_reg;
        tmp_3_reg_311_pp0_iter8_reg <= tmp_3_reg_311_pp0_iter7_reg;
        tmp_3_reg_311_pp0_iter9_reg <= tmp_3_reg_311_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_addr_reg_315_pp0_iter1_reg <= buffer_addr_reg_315;
        icmp_ln115_reg_307 <= icmp_ln115_fu_173_p2;
        icmp_ln115_reg_307_pp0_iter1_reg <= icmp_ln115_reg_307;
        tmp_3_reg_311_pp0_iter1_reg <= tmp_3_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_311_pp0_iter35_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        buffer_load_reg_332 <= buffer_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_311_pp0_iter42_reg == 1'd0))) begin
        gmem_addr_read_reg_337 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln115_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rng_state_2_reg_321 <= rng_state_2_fu_273_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln115_reg_307_pp0_iter34_reg == 1'd0))) begin
        urem_ln121_reg_327 <= grp_fu_283_p2;
    end
end

always @ (*) begin
    if ((icmp_ln115_fu_173_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln115_reg_307 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_rng_state_phi_fu_145_p4 = rng_state_2_reg_321;
    end else begin
        ap_phi_mux_rng_state_phi_fu_145_p4 = rng_state_reg_141;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter35 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter44 == 1'b1))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter44 == 1'b1) & (tmp_3_reg_311_pp0_iter43_reg == 1'd0))) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_reg_311_pp0_iter35_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_3_reg_311_pp0_iter35_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_311_pp0_iter41_reg == 1'd1) & (ap_enable_reg_pp0_iter42 == 1'b1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_311_pp0_iter42_reg == 1'd0) & (ap_enable_reg_pp0_iter43 == 1'b1))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_311_pp0_iter36_reg == 1'd1) & (ap_enable_reg_pp0_iter37 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_283_ce = 1'b1;
    end else begin
        grp_fu_283_ce = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_reg_311_pp0_iter35_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_reg_311_pp0_iter35_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_311_pp0_iter41_reg == 1'd1) & (ap_enable_reg_pp0_iter42 == 1'b1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_311_pp0_iter42_reg == 1'd0) & (ap_enable_reg_pp0_iter43 == 1'b1))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_311_pp0_iter36_reg == 1'd1) & (ap_enable_reg_pp0_iter37 == 1'b1))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln115_fu_173_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter44 == 1'b1) & (ap_enable_reg_pp0_iter43 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter44 == 1'b1) & (ap_enable_reg_pp0_iter43 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln115_fu_173_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln115_fu_167_p2 = (i_reg_130 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((m_axi_gmem_RVALID == 1'b0) & (tmp_3_reg_311_pp0_iter42_reg == 1'd0) & (ap_enable_reg_pp0_iter43 == 1'b1)) | ((m_axi_gmem_BVALID == 1'b0) & (tmp_3_reg_311_pp0_iter41_reg == 1'd1) & (ap_enable_reg_pp0_iter42 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter36 == 1'b1) & (1'b1 == ap_block_state38_io)) | ((m_axi_gmem_RVALID == 1'b0) & (tmp_3_reg_311_pp0_iter42_reg == 1'd0) & (ap_enable_reg_pp0_iter43 == 1'b1)) | ((m_axi_gmem_BVALID == 1'b0) & (tmp_3_reg_311_pp0_iter41_reg == 1'd1) & (ap_enable_reg_pp0_iter42 == 1'b1)) | ((1'b1 == ap_block_state39_io) & (ap_enable_reg_pp0_iter37 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter36 == 1'b1) & (1'b1 == ap_block_state38_io)) | ((m_axi_gmem_RVALID == 1'b0) & (tmp_3_reg_311_pp0_iter42_reg == 1'd0) & (ap_enable_reg_pp0_iter43 == 1'b1)) | ((m_axi_gmem_BVALID == 1'b0) & (tmp_3_reg_311_pp0_iter41_reg == 1'd1) & (ap_enable_reg_pp0_iter42 == 1'b1)) | ((1'b1 == ap_block_state39_io) & (ap_enable_reg_pp0_iter37 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state38_io = (((tmp_3_reg_311_pp0_iter35_reg == 1'd1) & (m_axi_gmem_AWREADY == 1'b0)) | ((tmp_3_reg_311_pp0_iter35_reg == 1'd0) & (m_axi_gmem_ARREADY == 1'b0)));
end

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39_io = ((m_axi_gmem_WREADY == 1'b0) & (tmp_3_reg_311_pp0_iter36_reg == 1'd1));
end

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state44_pp0_stage0_iter42 = ((m_axi_gmem_BVALID == 1'b0) & (tmp_3_reg_311_pp0_iter41_reg == 1'd1));
end

always @ (*) begin
    ap_block_state45_pp0_stage0_iter43 = ((m_axi_gmem_RVALID == 1'b0) & (tmp_3_reg_311_pp0_iter42_reg == 1'd0));
end

assign ap_block_state46_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_r_address0 = buffer_addr_reg_315_pp0_iter34_reg;

assign buffer_r_address1 = buffer_addr_reg_315_pp0_iter43_reg;

assign buffer_r_d1 = gmem_addr_read_reg_337;

assign grp_fu_283_p0 = {{{xor_ln66_1_fu_267_p2}, {xor_ln66_fu_223_p2}}, {tmp_fu_229_p4}};

assign icmp_ln115_fu_173_p2 = ((i_reg_130 == size) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = zext_ln121_fu_288_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = zext_ln121_fu_288_p1;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = buffer_load_reg_332;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 32'd4294967295;

assign m_axi_gmem_WUSER = 1'd0;

assign rng_state_2_fu_273_p4 = {{{xor_ln66_1_fu_267_p2}, {xor_ln66_fu_223_p2}}, {tmp_fu_229_p4}};

assign tmp_3_fu_183_p3 = ap_phi_mux_rng_state_phi_fu_145_p4[32'd1];

assign tmp_4_fu_195_p3 = ap_phi_mux_rng_state_phi_fu_145_p4[32'd3];

assign tmp_5_fu_203_p3 = ap_phi_mux_rng_state_phi_fu_145_p4[32'd4];

assign tmp_6_fu_239_p3 = ap_phi_mux_rng_state_phi_fu_145_p4[32'd5];

assign tmp_7_fu_247_p3 = ap_phi_mux_rng_state_phi_fu_145_p4[32'd2];

assign tmp_fu_229_p4 = {{ap_phi_mux_rng_state_phi_fu_145_p4[31:2]}};

assign trunc_ln65_fu_191_p1 = ap_phi_mux_rng_state_phi_fu_145_p4[0:0];

assign xor_ln66_1_fu_267_p2 = (xor_ln66_6_fu_261_p2 ^ xor_ln66_5_fu_255_p2);

assign xor_ln66_3_fu_211_p2 = (trunc_ln65_fu_191_p1 ^ tmp_3_fu_183_p3);

assign xor_ln66_4_fu_217_p2 = (tmp_5_fu_203_p3 ^ tmp_4_fu_195_p3);

assign xor_ln66_5_fu_255_p2 = (tmp_6_fu_239_p3 ^ tmp_3_fu_183_p3);

assign xor_ln66_6_fu_261_p2 = (tmp_7_fu_247_p3 ^ tmp_5_fu_203_p3);

assign xor_ln66_fu_223_p2 = (xor_ln66_4_fu_217_p2 ^ xor_ln66_3_fu_211_p2);

assign zext_ln115_fu_178_p1 = i_reg_130;

assign zext_ln121_fu_288_p1 = urem_ln121_reg_327;

endmodule //hbm_traffic_gen_random_read_write
